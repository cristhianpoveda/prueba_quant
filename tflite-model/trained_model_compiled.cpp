/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 13.06.2022 21:59:10

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 637632;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[71];
TfLiteEvalTensor tflEvalTensors[71];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,160,160,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*1] = { 
  /* [0][0][][] */ -84, -108, -29, 
  /* [0][1][][] */ 67, -36, 17, 
  /* [0][2][][] */ 32, 127, 20, 
  /* [1][0][][] */ 105, -95, -10, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -2, -13, 
  /* [2][0][][] */ -23, -2, -47, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 3, -21, -14, 
  /* [3][2][][] */ -101, -126, -43, 
  /* [4][0][][] */ 17, -50, 3, 
  /* [4][1][][] */ 13, -127, 1, 
  /* [4][2][][] */ 8, -84, -10, 
  /* [5][0][][] */ -50, 23, -10, 
  /* [5][1][][] */ -127, 23, -6, 
  /* [5][2][][] */ -90, 20, -4, 
  /* [6][0][][] */ -16, 79, 127, 
  /* [6][1][][] */ -50, 56, -15, 
  /* [6][2][][] */ -36, -51, -87, 
  /* [7][0][][] */ 34, 26, -12, 
  /* [7][1][][] */ 127, 75, 1, 
  /* [7][2][][] */ 34, 8, -15, 
  /* [8][0][][] */ -21, -31, 52, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -27, 47, -14, 
  /* [9][1][][] */ -24, 127, -14, 
  /* [9][2][][] */ -14, 92, -6, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -94, 35, 
  /* [11][2][][] */ -85, 127, -47, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 81, 18, -18, 
  /* [13][1][][] */ 127, 110, -7, 
  /* [13][2][][] */ 72, 120, 51, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 80, 
  /* [15][0][][] */ -75, -15, 20, 
  /* [15][1][][] */ -127, -125, 14, 
  /* [15][2][][] */ -24, -77, -11, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant2_scale = { 16, { 0.071090623736381531, 0.35248959064483643, 0.087244786322116852, 0.049781147390604019, 0.0057372190058231354, 0.0065870746038854122, 0.044351477175951004, 0.0064798127859830856, 0.053397968411445618, 0.010397014208137989, 0.14573043584823608, 0.30875948071479797, 0.10483936965465546, 0.004098283126950264, 0.29018485546112061, 0.0095276087522506714, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 286, 136, -116, 557, 59764, 54818, 3357, 13551, 4194, 9798, 804, 37, 4310, 8424, 119, 26303, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.00027878678520210087, 0.001382312155328691, 0.00034213642356917262, 0.00019522020011208951, 2.2498899852507748e-05, 2.5831666789599694e-05, 0.00017392737208865583, 2.5411032765987329e-05, 0.0002094038063660264, 4.0772607462713495e-05, 0.00057149195345118642, 0.0012108215596526861, 0.00041113479528576136, 1.607169906492345e-05, 0.0011379799107089639, 3.7363173760240898e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ 4,-9,9,2,-19,11,8,16,-7,-11,-1,-4,-3,-5,2,-1, 10,-10,3,2,14,-2,10,-26,-9,9,-7,85,-11,22,2,-1, -1,-5,-4,1,2,-14,-5,11,3,2,-6,-4,-1,-3,-3,-1, 
  /* [0][1][][] */ 10,-10,7,3,127,-24,-127,-21,127,127,1,0,117,-21,-5,-19, -127,127,127,-1,-87,-92,-20,-102,12,-105,127,127,127,127,127,127, 17,-9,-1,-1,-10,127,1,-10,-1,-12,-5,3,8,-2,-14,-9, 
  /* [0][2][][] */ -3,-4,3,-13,-17,15,46,7,-7,-7,-5,6,-3,3,-1,-12, 18,-21,-2,-127,7,-16,-11,127,-10,1,0,-3,-16,-54,-10,-37, 0,-8,2,-3,2,-5,-7,-2,-2,2,-6,6,-2,-3,-6,-12, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.0046810200437903404, 0.010135922580957413, 0.0073606055229902267, 0.0077923708595335484, 0.059457719326019287, 0.050869394093751907, 0.0070784548297524452, 0.043438989669084549, 0.013678526505827904, 0.059801094233989716, 0.010739999823272228, 0.0092055108398199081, 0.0047617917880415916, 0.0099710766226053238, 0.010340733453631401, 0.038026902824640274, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { 20525, -212, 164, 2945, -941, 339, 10263, 1073, -62, 94, -1934, 2657, -464, -1184, -364, -848, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.000110141649201978, 0.00023849229910410941, 0.00017319072503596544, 0.00018334991182200611, 0.0013990051811560988, 0.0011969269253313541, 0.00016655187937431037, 0.0010220939293503761, 0.00032184767769649625, 0.0014070846373215318, 0.00025270588230341673, 0.00021660025231540203, 0.00011204215843463317, 0.00023461357341147959, 0.00024331138411071151, 0.00089475070126354694, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ -14,-17,-18,-60,-26,-39,18,-15,33,8,-33,-6,104,127,-22,-101, 
  /* [1][0][][] */ 127,-63,-47,19,-45,71,-67,-42,-36,86,-39,-57,-9,5,-60,-16, 
  /* [2][0][][] */ -44,-95,44,40,45,-64,-75,-22,37,-96,27,-127,51,-21,-73,23, 
  /* [3][0][][] */ 44,8,15,8,-15,75,-52,-24,127,45,10,17,2,-16,9,24, 
  /* [4][0][][] */ -90,-31,-26,-127,-4,32,50,-124,38,-19,-45,-33,-112,32,-39,-18, 
  /* [5][0][][] */ 93,49,74,-23,49,-49,-126,-127,-17,-78,58,49,-56,51,65,-43, 
  /* [6][0][][] */ 108,44,-127,-86,22,-71,3,-97,-41,20,-125,99,95,-102,11,70, 
  /* [7][0][][] */ -127,-4,96,-20,-64,4,-1,-51,-56,61,87,-33,57,-26,28,28, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0086510814726352692, 0.0094838961958885193, 0.0071156383492052555, 0.010343385860323906, 0.0096075898036360741, 0.0068501867353916168, 0.0069722738116979599, 0.011045204475522041, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -6926, -3411, 11300, -10185, 21202, 7161, -8686, 11314, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00020355486776679754, 0.0002231505059171468, 0.00016742678417358547, 0.00024337378272321075, 0.00022606094717048109, 0.00016118086932692677, 0.00016405350470449775, 0.0002598871651571244, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ -33,28,0,-20,-70,-33,-127,35, 
  /* [1][0][][] */ 83,-69,-43,-53,127,-78,109,9, 
  /* [2][0][][] */ -109,123,-51,-127,38,-32,-30,41, 
  /* [3][0][][] */ 60,34,94,-2,111,120,127,-15, 
  /* [4][0][][] */ -93,-124,58,2,-69,-127,-9,-21, 
  /* [5][0][][] */ 127,-40,78,66,-76,-9,-9,-24, 
  /* [6][0][][] */ 35,35,127,-28,48,-37,-42,30, 
  /* [7][0][][] */ 24,14,-127,-30,-33,103,92,-62, 
  /* [8][0][][] */ -12,127,-27,0,63,100,49,39, 
  /* [9][0][][] */ -15,127,-56,76,26,-119,22,120, 
  /* [10][0][][] */ -1,-127,-5,-28,-81,-120,-60,-74, 
  /* [11][0][][] */ -127,-78,106,52,-6,-58,99,68, 
  /* [12][0][][] */ -28,36,-127,78,31,-52,-61,87, 
  /* [13][0][][] */ 102,-127,95,81,13,37,38,-64, 
  /* [14][0][][] */ -13,102,-38,-127,-12,-83,-26,-58, 
  /* [15][0][][] */ 41,109,29,-7,36,-63,106,-127, 
  /* [16][0][][] */ -107,-127,-65,94,-50,27,-2,71, 
  /* [17][0][][] */ -23,-117,-127,97,-55,89,-46,90, 
  /* [18][0][][] */ -114,-61,-43,90,-15,76,-12,127, 
  /* [19][0][][] */ 45,-127,87,-116,8,-61,36,-22, 
  /* [20][0][][] */ -12,73,40,16,37,127,89,-23, 
  /* [21][0][][] */ 32,112,49,-33,46,-67,96,-127, 
  /* [22][0][][] */ 25,17,107,13,-3,127,32,-40, 
  /* [23][0][][] */ -94,-78,30,-66,76,104,-51,-127, 
  /* [24][0][][] */ -104,-94,41,-91,127,126,-48,-125, 
  /* [25][0][][] */ 127,16,-58,-18,17,29,-61,-13, 
  /* [26][0][][] */ -125,-28,-127,-18,-48,-33,24,-6, 
  /* [27][0][][] */ 79,33,-1,-63,-127,-21,86,96, 
  /* [28][0][][] */ -127,-110,0,51,-87,-107,10,12, 
  /* [29][0][][] */ 115,113,39,-127,25,29,-66,-103, 
  /* [30][0][][] */ -84,-87,32,-63,67,103,-42,-127, 
  /* [31][0][][] */ 46,47,-4,127,10,-65,10,17, 
  /* [32][0][][] */ -36,127,-7,38,20,65,-16,50, 
  /* [33][0][][] */ -46,127,-82,24,25,-35,-22,1, 
  /* [34][0][][] */ -127,-107,-47,106,-9,7,29,118, 
  /* [35][0][][] */ -46,127,-32,-6,69,111,47,69, 
  /* [36][0][][] */ 58,30,-7,-54,-127,-35,98,104, 
  /* [37][0][][] */ -64,123,34,27,-127,103,-18,-115, 
  /* [38][0][][] */ 34,43,24,20,127,76,113,51, 
  /* [39][0][][] */ -23,-68,42,-25,10,38,-98,127, 
  /* [40][0][][] */ -65,-55,-56,127,-34,6,20,60, 
  /* [41][0][][] */ 127,12,57,108,-44,-17,-5,-32, 
  /* [42][0][][] */ -51,8,-78,-127,50,-116,8,84, 
  /* [43][0][][] */ 22,-12,84,0,34,127,101,6, 
  /* [44][0][][] */ -33,-23,-70,127,52,11,-35,-36, 
  /* [45][0][][] */ 58,122,98,-127,54,-52,22,-109, 
  /* [46][0][][] */ -33,-127,-36,29,-10,38,-65,119, 
  /* [47][0][][] */ 38,40,127,8,74,115,118,-5, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0043832277879118919, 0.0046331197954714298, 0.0029234152752906084, 0.0025966765824705362, 0.00061531027313321829, 0.0030964964535087347, 0.0054416591301560402, 0.0027021253481507301, 0.0031648299191147089, 0.0055287363938987255, 0.0034201436210423708, 0.0027273125015199184, 0.0025846711359918118, 0.003774347947910428, 0.0032951938919723034, 0.0030152611434459686, 0.0024099273141473532, 0.00052723742555826902, 0.0024916664697229862, 0.0036833265330642462, 0.0037780646234750748, 0.001799879246391356, 0.0048405211418867111, 0.0035895919427275658, 0.0043680737726390362, 0.0084614874795079231, 0.0032141932751983404, 0.010296082124114037, 0.0020361999049782753, 0.00055931980023160577, 0.0033293070737272501, 0.0074534080922603607, 0.0042219944298267365, 0.0038184232544153929, 0.0029585410375148058, 0.0035939787048846483, 0.0051684710197150707, 0.0064159249886870384, 0.0033475433010607958, 0.0047714877873659134, 0.0036986200138926506, 0.0030065730679780245, 0.0031446400098502636, 0.0045211594551801682, 0.004580420907586813, 0.0021553798578679562, 0.0025694651994854212, 0.0031995116733014584, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 968, -220, -428, 1598, 14116, 1748, -285, 2544, 1270, 1102, 204, 2983, 719, 627, -723, 391, 2535, 16496, 2438, -696, 1015, -1121, -7, 1708, -322, -446, 1439, -20, 3576, 15193, 1852, -18, 337, -99, 2016, -13, 305, -163, 1326, 1080, 1130, 1926, 329, -271, 453, 2145, 1204, -247, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00051660428289324045, 0.00054605636978521943, 0.00034455175045877695, 0.00030604255152866244, 7.2520051617175341e-05, 0.00036495097447186708, 0.00064135028515011072, 0.00031847067293711007, 0.00037300473195500672, 0.00065161316888406873, 0.00040309582254849374, 0.00032143920543603599, 0.00030462761060334742, 0.00044484209502115846, 0.0003883693425450474, 0.00035537665826268494, 0.00028403240139596164, 6.2139850342646241e-05, 0.00029366611852310598, 0.00043411439401097596, 0.00044528013677336276, 0.0002121325524058193, 0.00057050056057050824, 0.00042306690011173487, 0.00051481823902577162, 0.00099726521875709295, 0.0003788226458709687, 0.0012134893331676722, 0.00023998515098355711, 6.5921056375373155e-05, 0.00039238989120349288, 0.00087845366215333343, 0.00049760140245780349, 0.00045003677951171994, 0.00034869165392592549, 0.00042358390055596828, 0.00060915248468518257, 0.00075617659604176879, 0.00039453920908272266, 0.00056236435193568468, 0.00043591685243882239, 0.00035435266909189522, 0.00037062514456920326, 0.0005328608094714582, 0.00053984532132744789, 0.00025403161998838186, 0.00030283542582765222, 0.0003770922776311636, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -34,-95,-2,-22,127,-70,72,-56,-88,-61,-26,-35,120,34,65,-127,68,-13,4,-15,-125,127,-3,4,-17,62,55,-29,57,-75,7,-28,-111,-93,49,78,29,94,99,-63,-127,-10,28,69,44,-127,101,89, -33,-107,-62,48,-80,97,56,-61,-79,36,61,-89,123,91,107,-73,-80,-70,37,-45,-120,101,-54,93,-80,77,79,-114,79,-51,-2,-110,-61,-88,82,127,101,127,108,-64,-125,-70,72,84,76,115,101,77, 16,-54,-69,85,-46,-32,37,-7,122,31,49,-67,27,55,-41,-6,-77,-18,40,-28,-56,29,-104,-2,-65,38,20,-69,14,59,91,-61,-10,10,1,52,73,78,20,-15,-17,84,64,28,34,25,23,-123, 
  /* [0][1][][] */ -116,-106,-16,-81,-74,-82,93,-108,-127,-127,95,-76,111,64,-127,-70,127,-127,-64,-70,-87,126,-52,1,-17,100,102,-64,-110,-78,8,-43,-99,-127,-127,66,53,81,-1,-94,55,-21,75,125,80,115,126,-127, -127,-127,-127,-107,-21,127,127,-127,118,67,127,-127,127,127,69,-96,55,-89,-127,-127,-127,93,-127,127,-125,127,127,-127,-127,127,-20,-127,-127,-117,59,120,127,116,-22,-127,108,-108,127,127,127,-1,127,120, -54,-85,-110,127,86,-48,50,-31,107,30,34,-54,22,69,79,-40,-20,2,-12,-51,-62,17,-80,-21,-127,41,22,-92,-55,39,127,-75,-57,3,75,74,77,75,-42,-30,54,127,83,20,50,-56,22,31, 
  /* [0][2][][] */ -76,-21,7,-1,-44,-26,24,-53,62,-55,16,-47,9,31,-39,-25,-74,-40,94,-59,-14,34,-83,-17,-17,71,68,-21,23,63,-4,-21,-9,-76,-42,38,36,15,-82,-31,23,-2,41,38,42,49,9,-62, -61,-50,-30,-88,96,53,56,-56,123,27,-33,-58,7,47,-122,-81,43,-3,51,-90,-56,33,-89,65,-90,76,87,-41,31,6,-39,-51,-65,-24,-56,41,40,26,-127,-71,31,-54,72,81,48,-115,28,6, -16,-41,-36,-28,-10,-21,25,-28,-75,28,-5,-8,1,17,48,-35,34,27,1,-64,-53,-28,-31,-31,-75,23,29,-18,8,-69,56,-40,-73,14,29,24,32,17,-78,-16,6,49,21,38,17,-11,11,50, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0033495151437819004, 0.0042638354934751987, 0.0074434522539377213, 0.0087808668613433838, 0.039327409118413925, 0.0067382077686488628, 0.0056794979609549046, 0.0035226084291934967, 0.0051762065850198269, 0.0041147381998598576, 0.0026289767120033503, 0.0027898768894374371, 0.0026495468337088823, 0.0025864564813673496, 0.012275788001716137, 0.0085531128570437431, 0.0049477391876280308, 0.021361149847507477, 0.0059317667037248611, 0.0053279702551662922, 0.00492833461612463, 0.017583897337317467, 0.0048439833335578442, 0.012545120902359486, 0.0056564421392977238, 0.0021856436505913734, 0.0025631196331232786, 0.0036735015455633402, 0.007696238812059164, 0.040391385555267334, 0.012955456972122192, 0.0030402438715100288, 0.0033502879086881876, 0.0055648051202297211, 0.0064841010607779026, 0.0024513192474842072, 0.0032480391673743725, 0.0028678204398602247, 0.0060704699717462063, 0.0028493341524153948, 0.005375369917601347, 0.0064475126564502716, 0.0027615856379270554, 0.0033225447405129671, 0.0029094163328409195, 0.019615791738033295, 0.0025190499145537615, 0.010599102824926376, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 8166, 5066, 2938, 1147, -1500, 75, 96, 32903, -3743, 418, 8957, 51050, 4638, 4755, 77, 10586, -1918, 14813, -137, 6374, 15677, 694, 3688, -7568, 9585, 2014, 1215, 11200, 2910, -1208, -7826, 9349, 2229, 419, -2187, 7518, -9744, 5468, 3772, 17738, -2054, 51, 7976, 3536, 4153, -135, 3653, -712, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 7.8812125138938427e-05, 0.00010032554564531893, 0.00017514005594421178, 0.00020660863083321601, 0.00092535081785172224, 0.00015854607045184821, 0.00013363524340093136, 8.2884907897096127e-05, 0.00012179309851489961, 9.6817369922064245e-05, 6.1858278058934957e-05, 6.564416253240779e-05, 6.2342282035388052e-05, 6.0857801145175472e-05, 0.000288842071313411, 0.00020124971342738718, 0.00011641739547485486, 0.00050261529395356774, 0.00013957098417449743, 0.00012536400754470378, 0.00011596081458264962, 0.00041373877320438623, 0.00011397607886465266, 0.00029517931398004293, 0.00013309276255313307, 5.1426912250462919e-05, 6.0308699175948277e-05, 8.6435335106216371e-05, 0.00018108797667082399, 0.00095038558356463909, 0.00030483427690342069, 7.1535148890689015e-05, 7.8830307757016271e-05, 0.00013093659072183073, 0.00015256708138622344, 5.7678102166391909e-05, 7.6424454164225608e-05, 6.7478125856723636e-05, 0.00014283458585850894, 6.7043154558632523e-05, 0.00012647929543163627, 0.00015170619008131325, 6.4978485170286149e-05, 7.8177523391786963e-05, 6.8456858571153134e-05, 0.00046154804294928908, 5.9271762438584119e-05, 0.00024939066497609019, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -43,-10,32,12,-34,-12,11,8,-45,-5,-63,-59,-26,-63,-10,-31,44,-41,41,42,-14,33,-39,11,-2,-40,55,-15,-5,-17,19,12,80,33,38,-127,19,0,-22,-34,0,-16,43,50,36,6,27,2, 
  /* [1][0][][] */ -1,37,63,-23,-10,47,-50,-33,2,26,-16,-96,8,91,-15,61,-21,23,-24,-60,-1,-77,-34,29,-81,-15,-1,-111,-28,-13,37,-55,45,87,-50,8,127,-22,-2,46,-43,42,-77,-22,111,-14,-35,-20, 
  /* [2][0][][] */ -2,-20,-61,17,-1,48,23,-1,3,45,-3,23,64,-89,15,-58,33,-89,23,31,-30,46,-7,32,-25,58,-16,-66,16,-3,26,-69,-44,-80,28,-18,104,28,-16,-65,-12,31,87,37,127,22,17,29, 
  /* [3][0][][] */ -1,18,-63,41,17,-33,-61,-99,16,-15,-36,2,8,21,34,75,-5,10,-33,19,4,-87,27,-50,-70,-11,127,-12,-42,-2,-52,11,1,-71,10,-5,-17,-29,-16,94,-38,-37,2,18,41,9,-38,36, 
  /* [4][0][][] */ -23,-53,-2,7,32,-29,-12,-11,28,-29,60,-78,5,30,6,12,-17,-22,10,-17,-6,-51,-3,-16,13,-11,41,46,32,23,-10,24,-13,-6,1,-1,-65,94,34,-24,23,-21,-20,-21,-76,16,127,11, 
  /* [5][0][][] */ 41,-23,3,15,24,-43,39,-127,27,-35,-7,125,-81,72,20,-71,4,-95,26,6,-32,63,-34,-56,-59,75,-26,-1,-17,56,-51,-33,28,56,44,0,-41,-12,-52,-46,20,-32,-42,-5,-36,63,94,23, 
  /* [6][0][][] */ 47,-22,23,-13,-34,-16,-32,16,-37,8,-39,127,-40,-37,-9,50,13,44,18,28,43,-86,-16,18,20,46,-62,1,12,-33,15,34,10,15,-12,-3,8,-5,0,-2,-7,-14,39,54,-1,-28,69,-12, 
  /* [7][0][][] */ -24,-1,1,61,33,32,4,27,25,6,70,-5,120,109,65,53,44,52,-21,1,20,-17,-97,-24,17,-1,-27,69,36,-26,-33,-19,40,4,37,-102,-75,36,35,58,-42,29,84,127,-60,-26,-109,62, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.0097187012434005737, 0.0059326598420739174, 0.005517859011888504, 0.0071442830376327038, 0.0084628351032733917, 0.0062622572295367718, 0.010034436360001564, 0.0057500824332237244, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { 8175, 15736, -5371, 4628, -1089, 2975, -10961, -17915, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.00022867532970849425, 0.00013959199714008719, 0.00012983198394067585, 0.00016810078523121774, 0.00019912554125767201, 0.0001473472366342321, 0.00023610438802279532, 0.00013529605348594487, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 61,127,-107,-123,4,94,26,65, 
  /* [1][0][][] */ 57,-65,44,-127,-37,66,-76,-34, 
  /* [2][0][][] */ -25,127,100,54,106,-8,38,7, 
  /* [3][0][][] */ 87,33,-92,40,-8,-108,-127,-16, 
  /* [4][0][][] */ -60,40,17,-41,-36,127,121,58, 
  /* [5][0][][] */ 29,82,-127,-73,55,74,23,-29, 
  /* [6][0][][] */ 10,127,63,77,83,-7,9,-107, 
  /* [7][0][][] */ 127,-21,-44,18,29,-2,104,7, 
  /* [8][0][][] */ 47,127,65,96,105,65,73,-73, 
  /* [9][0][][] */ 50,104,-127,-84,9,97,11,61, 
  /* [10][0][][] */ -63,-41,24,-52,-3,-39,-50,127, 
  /* [11][0][][] */ 1,-115,-127,-18,4,5,50,-27, 
  /* [12][0][][] */ 18,-108,-127,-31,-112,35,-71,44, 
  /* [13][0][][] */ -6,11,-92,107,-127,-29,-7,-8, 
  /* [14][0][][] */ -66,-39,-127,-15,39,-1,-13,-58, 
  /* [15][0][][] */ 27,-106,-127,8,-84,-28,-23,-13, 
  /* [16][0][][] */ 127,-61,-11,58,-76,22,25,92, 
  /* [17][0][][] */ -20,120,127,-39,-50,-7,-37,-23, 
  /* [18][0][][] */ 12,-127,53,87,-11,-64,41,-104, 
  /* [19][0][][] */ 127,-45,-66,39,-101,2,38,101, 
  /* [20][0][][] */ -33,-127,84,77,-23,-94,3,-75, 
  /* [21][0][][] */ -7,-47,-5,-21,127,-5,59,23, 
  /* [22][0][][] */ -127,23,-74,41,51,62,-87,-107, 
  /* [23][0][][] */ -116,-53,79,-1,-114,110,127,-59, 
  /* [24][0][][] */ -46,69,17,-35,-41,127,101,8, 
  /* [25][0][][] */ -52,-127,-125,-41,-35,-20,-28,-61, 
  /* [26][0][][] */ -7,51,-31,127,-110,45,-53,-14, 
  /* [27][0][][] */ 12,-127,33,67,17,-51,11,-121, 
  /* [28][0][][] */ 17,127,88,58,97,-23,26,-40, 
  /* [29][0][][] */ 113,30,-45,-28,57,-127,-109,42, 
  /* [30][0][][] */ 34,-14,34,-127,29,-15,19,-29, 
  /* [31][0][][] */ 52,-36,5,65,-8,32,13,127, 
  /* [32][0][][] */ -90,-71,4,-53,-68,127,51,71, 
  /* [33][0][][] */ -24,48,44,-34,37,127,-106,65, 
  /* [34][0][][] */ 34,127,-91,-51,-6,59,-67,54, 
  /* [35][0][][] */ 8,-127,40,52,-8,-68,38,-71, 
  /* [36][0][][] */ -10,-38,-100,-10,-127,-67,-24,9, 
  /* [37][0][][] */ -65,-127,59,82,-34,-91,-2,-54, 
  /* [38][0][][] */ -80,28,72,-70,-127,-86,-69,92, 
  /* [39][0][][] */ 61,-127,86,72,-40,-87,-20,-81, 
  /* [40][0][][] */ 9,61,20,54,-127,-21,-60,8, 
  /* [41][0][][] */ 111,118,-89,-127,51,20,3,18, 
  /* [42][0][][] */ 2,-26,-20,15,127,12,34,22, 
  /* [43][0][][] */ 127,28,76,32,-68,-25,55,99, 
  /* [44][0][][] */ 76,43,-24,9,87,-127,-104,25, 
  /* [45][0][][] */ 43,10,17,21,56,-127,-10,-47, 
  /* [46][0][][] */ 61,-45,2,127,37,68,28,71, 
  /* [47][0][][] */ -114,-61,79,70,-36,11,127,-85, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.0029351699631661177, 0.0032488335855305195, 0.0010028631659224629, 0.0027652883436530828, 0.0027289283461868763, 0.0038051565643399954, 0.0017720292089506984, 0.00091593357501551509, 0.0020578631665557623, 0.003890051506459713, 0.0037722878623753786, 0.0027527592610567808, 0.00079660332994535565, 0.003858550451695919, 0.0036201083566993475, 0.00070817791856825352, 0.0048633771948516369, 0.0028886531945317984, 0.0037120759952813387, 0.0031907465308904648, 0.0029915755148977041, 0.0032127888407558203, 0.006148993968963623, 0.00040249430458061397, 0.0019629073794931173, 0.0020300927571952343, 0.0010210743639618158, 0.0035534242633730173, 0.0015757610090076923, 0.0019424459896981716, 0.0070192194543778896, 0.0055744997225701809, 0.0027087710332125425, 0.003359244205057621, 0.0038977651856839657, 0.0043407473713159561, 0.0024683601222932339, 0.0042862086556851864, 0.0030853096395730972, 0.0033826071303337812, 0.0023886491544544697, 0.0031477510929107666, 0.0032487867865711451, 0.00229597557336092, 0.0019743770826607943, 0.0032612336799502373, 0.0050033093430101871, 0.0015910534420982003, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 2709, 3443, 12837, 843, 2424, -1468, 6207, 14478, 3758, -523, 2762, -2403, 15853, -1445, 1456, 20511, -361, 1896, 360, 2411, 3160, 3115, 400, 37702, 5545, 3800, 13865, 1713, 6843, 4647, 535, 980, 1298, 1469, -278, 268, -3029, -397, 2760, 2137, 4741, 2014, 3346, 5145, 4799, 2895, 1567, 6915, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00021836961968801916, 0.00024170544929802418, 7.4610623414628208e-05, 0.00020573084475472569, 0.0002030257455771789, 0.00028309455956332386, 0.00013183473492972553, 6.8143264797981828e-05, 0.00015310010348912328, 0.00028941052732989192, 0.00028064919752068818, 0.00020479870727285743, 5.926538142375648e-05, 0.00028706691227853298, 0.00026932740001939237, 5.268674431135878e-05, 0.00036182362237013876, 0.00021490888320840895, 0.00027616956504061818, 0.00023738390882499516, 0.0002225660573458299, 0.00023902380780782551, 0.00045747045078314841, 2.9944614652777091e-05, 0.00014603561430703849, 0.00015103405166883022, 7.5965494033880532e-05, 0.00026436627376824617, 0.00011723284842446446, 0.00014451333845499903, 0.00052221311489120126, 0.00041472943848930299, 0.00020152608340140432, 0.00024991974350996315, 0.0002899843966588378, 0.00032294122502207756, 0.00018364009156357497, 0.00031888368539512157, 0.00022953965526539832, 0.00025165788247250021, 0.00017770977865438908, 0.00023418515047524124, 0.0002417019713902846, 0.0001708150957711041, 0.00014688893861602992, 0.00024262798251584172, 0.00037223423714749515, 0.00011837056808872148, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 5,-44,12,14,-26,-90,-52,61,-36,-3,5,10,41,-9,-15,6,102,32,22,2,-2,-12,-65,20,3,-15,-15,-47,-69,80,-20,-127,62,-1,-45,-55,-11,-24,12,0,-12,48,3,-4,-11,38,127,-5, -127,-117,-20,127,-69,63,-110,127,36,17,31,-1,48,19,-9,-42,-32,114,29,2,-1,127,14,127,127,-29,-57,32,75,-109,-16,-92,79,-6,-35,-125,24,14,-52,-41,-110,5,-95,-127,26,31,47,127, -2,-15,13,11,-24,23,28,53,-1,-32,-2,8,-25,-6,-7,0,-63,90,-58,-36,-4,-22,127,18,-54,2,5,0,31,39,16,9,0,-17,-45,80,7,10,13,70,27,-16,19,-45,-12,22,-31,-8, 
  /* [0][1][][] */ -16,-8,-24,2,25,-87,114,-59,-9,14,8,31,127,13,6,-27,-8,-71,27,54,72,-61,39,16,-56,127,-81,-32,127,-92,45,-105,-37,11,-83,19,7,-58,-43,13,127,127,6,-125,-57,-64,-2,98, 97,-127,127,-2,127,77,-83,-38,66,127,127,-127,-97,127,127,127,127,127,121,127,127,123,1,6,124,-102,-127,127,39,127,127,-2,-127,127,127,127,-127,127,-127,-115,53,41,-127,-53,127,-127,-25,85, 41,28,-36,-2,-48,127,-127,90,116,-81,13,60,-41,6,13,-61,16,-3,-127,18,21,-112,-30,0,76,-15,-24,127,-75,-32,50,-51,-27,15,93,-27,37,1,-9,-90,113,5,26,19,-57,75,81,-80, 
  /* [0][2][][] */ -9,29,10,-30,-1,-54,-29,10,-8,2,-29,-4,-21,-24,9,3,-34,-30,3,-26,2,-8,83,-3,-99,3,31,-15,7,-9,-14,44,-14,0,-62,46,-2,-17,5,62,-22,-1,4,-10,-15,8,-19,23, 37,-11,-31,-35,29,29,109,-76,127,-25,-33,-5,-81,-37,-8,-65,-4,70,-2,33,12,40,-19,-21,-66,54,66,4,-109,8,-51,-15,-27,3,-37,9,54,-29,-16,127,-106,1,-19,36,33,38,3,-111, 4,36,7,-19,-8,-1,-12,-44,-44,-26,-40,-3,14,-25,-3,17,59,10,-37,-12,-13,-7,-40,-6,30,-31,16,-17,-28,-2,-13,2,30,-15,-22,-62,-9,-2,14,-3,-7,-6,4,-1,-17,8,60,-41, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.014544953592121601, 0.007364185992628336, 0.031733456999063492, 0.013955621980130672, 0.012191555462777615, 0.018383555114269257, 0.0084932064637541771, 0.014940425753593445, 0.0033385988790541887, 0.014224729500710964, 0.011527953669428825, 0.11741326749324799, 0.02431759424507618, 0.044367522001266479, 0.019933365285396576, 0.037466488778591156, 0.0059522148221731186, 0.0024500000290572643, 0.012106402777135372, 0.013663710094988346, 0.011312582530081272, 0.01041247695684433, 0.0031635200139135122, 0.022885669022798538, 0.0094297053292393684, 0.024213735014200211, 0.020872795954346657, 0.0098470104858279228, 0.012860190123319626, 0.022787613794207573, 0.0061462167650461197, 0.0040805689059197903, 0.007471973542124033, 0.0082699097692966461, 0.0070962882600724697, 0.015050624497234821, 0.15555337071418762, 0.018013292923569679, 0.0058673867024481297, 0.0097667397931218147, 0.008130442351102829, 0.0068188747391104698, 0.011802114546298981, 0.007561899721622467, 0.020127860829234123, 0.0053803399205207825, 0.0025520846247673035, 0.0093719819560647011, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { -678, 10581, -1666, -1136, 1019, -771, 5266, -5153, -3741, 24, -3252, 24, 1445, -406, -2760, 2952, 8588, 5596, 68, -4487, -6765, -2429, 20479, -6677, -3521, -239, 7974, -5773, 290, -413, -7350, 9574, 3662, -233, 2878, -298, 12, -370, 11818, -855, 3795, -4197, 4854, 10216, -850, 8216, 2439, -2677, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00034223421243950725, 0.00017327496607322246, 0.00074666959699243307, 0.00032836757600307465, 0.00028686012956313789, 0.00043255425407551229, 0.00019984015671070665, 0.00035153943463228643, 7.8555269283242524e-05, 0.00033469952177256346, 0.00027124598273076117, 0.0027626652736216784, 0.00057217868743464351, 0.0010439417092129588, 0.00046902036410756409, 0.00088156445417553186, 0.00014005211414769292, 5.7647059293230996e-05, 0.00028485653456300497, 0.00032149907201528549, 0.0002661784237716347, 0.00024499944993294775, 7.4435767601244152e-05, 0.00053848634706810117, 0.00022187542344909161, 0.0005697349552065134, 0.00049112463602796197, 0.00023169437190517783, 0.00030259272898547351, 0.00053617917001247406, 0.00014461686077993363, 9.6013391157612205e-05, 0.00017581114661879838, 0.00019458611495792866, 0.00016697149840183556, 0.00035413235309533775, 0.0036600793246179819, 0.0004238421970512718, 0.00013805615890305489, 0.00022980564972385764, 0.00019130452710669488, 0.00016044412041082978, 0.00027769681764766574, 0.00017792705330066383, 0.00047359673772007227, 0.00012659623462241143, 6.0049049352528527e-05, 0.00022051722044125199, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -43,-43,-25,-72,0,-21,78,76,-92,-86,-37,12,-62,-4,-66,42,-88,15,9,127,53,-15,6,82,68,79,23,0,-100,-48,-82,-58,-64,104,26,-46,33,-33,98,-4,35,-5,-1,-99,27,-22,-24,-89, 
  /* [1][0][][] */ -11,61,-18,-29,-65,45,-11,-41,-23,67,-13,28,59,35,-58,12,-29,-112,75,-60,127,13,-65,26,56,-12,-77,65,33,-13,73,31,-19,-12,3,-18,-6,114,-9,-30,62,32,-19,16,96,19,-31,59, 
  /* [2][0][][] */ -24,-31,116,17,95,-45,-5,28,-31,-5,-12,52,13,-43,-57,-127,-57,-112,-23,11,-102,22,-43,-39,-58,9,-1,-49,-49,4,-34,-14,-4,-3,24,-9,15,-33,-48,9,41,-34,21,-51,-51,-37,-61,-63, 
  /* [3][0][][] */ 47,16,61,6,13,-36,34,66,-43,-34,52,1,-62,52,-22,62,58,32,-35,22,-106,-58,120,-6,-1,8,-34,-35,-52,57,127,-49,23,-106,-19,39,-4,-81,-2,63,-89,-71,65,14,-97,-69,55,-4, 
  /* [4][0][][] */ 18,-15,75,-35,6,-10,-5,-1,-55,-6,-18,14,49,-76,36,-92,39,47,-11,-35,9,35,15,2,1,9,60,-20,37,25,-127,-16,-21,-21,10,16,51,-5,42,0,-44,-15,-73,28,-22,-95,4,18, 
  /* [5][0][][] */ 31,-53,52,30,28,32,32,1,-79,-12,-42,42,31,13,18,-39,91,70,4,-16,89,-60,127,-82,-13,44,18,42,11,12,-21,-39,-21,-49,-32,27,39,18,65,11,-76,31,35,31,57,-18,74,-1, 
  /* [6][0][][] */ -50,45,-127,90,39,32,45,18,-25,-14,70,-78,-97,-17,-26,22,-106,16,-17,91,12,38,-73,-80,4,-25,44,59,-31,-41,-29,10,41,69,-47,-13,-9,-26,72,6,54,56,-113,-48,-39,112,-55,-37, 
  /* [7][0][][] */ 36,77,-83,13,20,58,126,68,42,89,-107,-27,-47,-1,-63,-59,29,35,127,108,79,-7,118,28,120,101,-67,92,-73,27,-16,-80,27,-75,-15,18,-8,106,-66,97,-66,54,-15,-91,75,-22,51,-37, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.003191652474924922, 0.0035611127968877554, 0.0053755324333906174, 0.0051008895970880985, 0.0058203772641718388, 0.0065075140446424484, 0.0033339634537696838, 0.0034987654071301222, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { 3059, 831, 23126, -5072, 4405, -15747, 2345, -11574, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 7.5097705121152103e-05, 8.3790888311341405e-05, 0.00012648312258534133, 0.00012002093717455864, 0.0001369500532746315, 0.00015311797324102372, 7.8446202678605914e-05, 8.2323895185254514e-05, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 63,38,127,-35,74,111,-77,-45, 
  /* [1][0][][] */ 7,-73,-127,3,60,19,33,8, 
  /* [2][0][][] */ -127,-1,-58,-38,59,43,-84,-41, 
  /* [3][0][][] */ 26,61,127,-58,2,-99,0,-14, 
  /* [4][0][][] */ -127,20,-49,-21,48,25,-40,-53, 
  /* [5][0][][] */ -91,26,-58,-18,7,29,-82,-127, 
  /* [6][0][][] */ -36,-127,-116,33,93,10,2,35, 
  /* [7][0][][] */ -54,-127,-82,-64,-64,-63,22,77, 
  /* [8][0][][] */ 81,29,-7,-4,95,-66,-127,16, 
  /* [9][0][][] */ -37,53,-55,95,-59,-38,127,-44, 
  /* [10][0][][] */ -29,127,49,70,127,-20,-3,51, 
  /* [11][0][][] */ -80,-28,-25,-13,-85,122,127,-5, 
  /* [12][0][][] */ 72,23,-127,31,-10,-44,-63,-22, 
  /* [13][0][][] */ 59,-22,-67,-14,17,-127,-35,-19, 
  /* [14][0][][] */ 9,-81,98,28,127,-124,-61,11, 
  /* [15][0][][] */ -39,-40,-8,127,68,102,-83,35, 
  /* [16][0][][] */ 114,39,-23,29,86,-111,-127,-39, 
  /* [17][0][][] */ 63,127,56,86,55,68,29,-102, 
  /* [18][0][][] */ 34,-15,5,14,127,-1,31,-15, 
  /* [19][0][][] */ 13,127,43,26,-126,9,28,-42, 
  /* [20][0][][] */ -54,32,72,-127,14,33,-25,108, 
  /* [21][0][][] */ -35,60,30,-127,13,48,2,101, 
  /* [22][0][][] */ -69,-81,-93,25,-100,127,112,-14, 
  /* [23][0][][] */ 110,41,-127,17,14,-73,-80,-32, 
  /* [24][0][][] */ -65,62,16,-9,-14,95,-127,92, 
  /* [25][0][][] */ -105,-64,-127,18,-56,-71,77,92, 
  /* [26][0][][] */ 46,-11,-34,-28,91,-12,127,-43, 
  /* [27][0][][] */ 127,-63,17,88,0,36,-30,108, 
  /* [28][0][][] */ 35,72,38,-5,127,-72,56,-30, 
  /* [29][0][][] */ -11,-15,-12,-41,-64,9,127,-34, 
  /* [30][0][][] */ 38,-127,-35,-76,-112,22,14,-51, 
  /* [31][0][][] */ 6,35,-2,1,-127,-2,-24,-6, 
  /* [32][0][][] */ 50,-62,-61,73,-4,-78,111,-127, 
  /* [33][0][][] */ 46,127,52,32,56,-16,-20,-16, 
  /* [34][0][][] */ -127,-35,123,-6,-20,97,99,13, 
  /* [35][0][][] */ -25,74,127,-15,-61,-66,-33,18, 
  /* [36][0][][] */ -93,16,98,-20,-23,127,66,18, 
  /* [37][0][][] */ -21,-95,-6,-127,-43,-83,84,44, 
  /* [38][0][][] */ 50,-14,80,-52,65,62,-127,12, 
  /* [39][0][][] */ -31,118,-127,-41,-1,3,-1,100, 
  /* [40][0][][] */ 71,-59,20,35,17,7,10,127, 
  /* [41][0][][] */ -11,91,127,10,6,91,-58,13, 
  /* [42][0][][] */ 59,-113,-115,-27,-127,24,16,-91, 
  /* [43][0][][] */ -8,-78,36,-55,127,-34,22,37, 
  /* [44][0][][] */ -3,127,124,8,9,42,-54,13, 
  /* [45][0][][] */ -32,49,9,75,-127,69,-125,26, 
  /* [46][0][][] */ -40,-36,65,51,-111,-127,-42,0, 
  /* [47][0][][] */ -13,51,32,-112,-127,40,-13,67, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0023830828722566366, 0.0035075503401458263, 0.003072007792070508, 0.0031504409853368998, 0.0023325509391725063, 0.0023747067898511887, 0.0023166020400822163, 0.0018525342456996441, 0.0030936396215111017, 0.0039327726699411869, 0.0019325523171573877, 0.002121838042512536, 0.0034603681415319443, 0.0035055275075137615, 0.0027621709741652012, 0.0018309715669602156, 0.0025784575846046209, 0.0021516226697713137, 0.0019463247153908014, 0.0034644808620214462, 0.002690720371901989, 0.0027158195152878761, 0.0025365045294165611, 0.0019261555280536413, 0.0021009505726397038, 0.0025706130545586348, 0.0035579621326178312, 0.0032916620839387178, 0.0012099002487957478, 0.0032874238677322865, 0.0020343952346593142, 0.0018569580279290676, 0.002135485177859664, 0.0019758858252316713, 0.0029343299102038145, 0.0029852455481886864, 0.0027143498882651329, 0.0024269099812954664, 0.0029216262046247721, 0.0020769550465047359, 0.0033048822078853846, 0.0010450204135850072, 0.0015106457285583019, 0.0033661115448921919, 0.0011816531186923385, 0.0029310311656445265, 0.0022313513327389956, 0.0024021000135689974, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 1896, -1067, 587, -1396, 3502, -946, 3214, -2730, 885, 392, 2330, 3461, 593, -239, 802, 4184, -1581, 3771, 4497, 563, -1160, 2020, -479, 4238, 2170, 1520, 901, -853, 8144, -317, 2136, -1936, -592, 4137, -536, 1940, 1680, 962, 141, 3685, 1622, 9464, -3559, 1272, 8082, -111, 3008, 2630, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00023072116891853511, 0.00033958788844756782, 0.00029742030892521143, 0.00030501390574499965, 0.00022582884412258863, 0.00022991021978668869, 0.00022428474039770663, 0.00017935542564373463, 0.00029951462056487799, 0.00038075633347034454, 0.00018710248696152121, 0.00020542841230053455, 0.00033501989673823118, 0.00033939204877242446, 0.00026742304908111691, 0.00017726780788507313, 0.00024963662144728005, 0.00020831204892601818, 0.00018843587895389646, 0.00033541806624270976, 0.00026050547603517771, 0.00026293547125533223, 0.00024557486176490784, 0.00018648317200131714, 0.00020340617629699409, 0.00024887712788768113, 0.00034446857171133161, 0.00031868639052845538, 0.0001171380135929212, 0.00031827608472667634, 0.00019696253002621233, 0.00017978373216465116, 0.00020674968254752457, 0.00019129786232952029, 0.00028409084188751876, 0.00028902030317112803, 0.00026279318262822926, 0.00023496433277614415, 0.0002828609140124172, 0.00020108300668653101, 0.00031996631878428161, 0.00010117496276507154, 0.00014625507174059749, 0.00032589433249086142, 0.00011440322850830853, 0.00028377145645208657, 0.00021603108325507492, 0.000232562335440889, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ -84,113,-127,94,-58,83,-51,112,-54,-87,71,-59,62,-47,-55,-54,79,75,99,-127,94,-93,50,-95,-66,-51,91,91,-97,-56,-89,127,66,-100,76,-127,-83,-127,86,-30,-3,-81,61,-123,87,61,-48,-82, -86,114,-71,106,-81,127,-22,107,-116,-106,112,-81,83,-69,-64,-86,98,112,127,-111,127,-127,68,-127,-113,-79,110,111,37,-72,-79,101,79,-127,92,-112,-106,-126,115,-66,-93,87,93,-127,-40,87,-74,-72, -74,64,-3,19,-19,62,-33,54,-67,-46,48,-31,23,-6,-36,-32,49,53,75,-45,47,-59,17,-24,-75,-23,65,26,127,-33,-42,107,33,-79,42,-15,-54,-45,52,-66,-123,-42,40,-25,-64,67,-38,-80, 
  /* [0][1][][] */ -113,91,-75,127,-60,114,-124,127,-99,-96,80,-96,100,-127,-108,-107,92,97,-31,-103,105,-67,103,-84,-99,-84,120,102,-121,-84,-127,105,97,32,92,-114,-86,-118,117,-71,-78,-99,97,-114,127,96,-69,-124, -127,127,-101,120,-127,120,-127,124,-127,-127,127,-127,127,-117,-127,-127,127,127,-50,-89,122,-101,127,-100,-127,-127,127,127,22,-127,-122,96,127,38,127,-86,-127,-95,127,-127,-127,127,127,-95,-54,127,-127,-127, -79,71,-63,40,-37,50,-88,41,-53,-37,64,-62,55,-53,-81,-27,79,59,-36,-43,39,-51,73,-58,-112,-27,69,43,105,-52,-30,94,31,10,74,-41,-49,-17,69,-78,-62,-82,41,-40,-94,101,-36,-79, 
  /* [0][2][][] */ -67,85,-24,66,-46,78,-117,76,-56,-57,36,-54,63,-66,-68,-85,46,36,-76,-11,40,-18,47,-29,-77,-59,84,23,-95,-32,-48,43,47,52,64,-93,-33,-56,48,-50,-107,-30,59,-57,104,67,-48,-56, -77,78,-101,72,-59,68,-117,67,-58,-27,54,-66,65,-112,-79,-60,55,52,-112,-3,14,-23,47,-32,-114,-80,74,56,-16,-72,-45,34,45,60,82,-83,-29,-57,52,-54,-64,105,75,-95,-11,102,-69,-66, -40,68,-79,31,-11,32,-89,72,-23,2,27,-21,46,-57,-65,-21,38,22,-84,2,1,-7,24,-13,-77,-34,50,50,65,2,12,40,9,43,53,-61,-6,-5,35,-45,-7,-12,7,-18,-57,81,-26,-30, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0025192000903189182, 0.0038823888171464205, 0.0021484286990016699, 0.0031188309658318758, 0.0046454258263111115, 0.0031477976590394974, 0.0020907970611006021, 0.0071814171969890594, 0.0034990615677088499, 0.0021470573265105486, 0.0019262714777141809, 0.0032371894922107458, 0.0029639364220201969, 0.0048525691963732243, 0.0015292096650227904, 0.0024902818258851767, 0.0030871087219566107, 0.0022786576300859451, 0.0052037257701158524, 0.0017536211526021361, 0.0028596308548003435, 0.002698815893381834, 0.003265702398493886, 0.004587952047586441, 0.0020425659604370594, 0.0027569874655455351, 0.0021917193662375212, 0.0017934079514816403, 0.010375791229307652, 0.0033295273315161467, 0.0033465013839304447, 0.0090159093961119652, 0.0061955461278557777, 0.0079235108569264412, 0.0020055859349668026, 0.0028540103230625391, 0.0031189718283712864, 0.0022838481236249208, 0.0025553877931088209, 0.0030454224906861782, 0.0021319123916327953, 0.010079419240355492, 0.0205355454236269, 0.0027167208027094603, 0.0090227983891963959, 0.0017574361991137266, 0.0027009462937712669, 0.0022898938041180372, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 12539, 873, 20566, 2111, 12557, -129, 43533, 584, 8141, 39832, 9320, 26112, 22, 12876, 47311, 28969, 3397, 4558, 3077, 51325, 1370, 15678, 3705, 15899, 16828, 35964, -466, -110, -2999, 14967, 19057, 512, -644, 781, 4790, 17439, 8205, 32911, 7343, 15281, 27792, -93, 561, 13202, -272, 7446, 33821, 26894, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 5.9275298553984612e-05, 9.1350324510131031e-05, 5.0551265303511173e-05, 7.3384260758757591e-05, 0.0001093041428248398, 7.4065828812308609e-05, 4.9195226893061772e-05, 0.00016897452587727457, 8.2330865552648902e-05, 5.0518996431492269e-05, 4.5324035454541445e-05, 7.6169162639416754e-05, 6.9739682658109814e-05, 0.00011417810310376808, 3.5981403925688937e-05, 5.8594869187800214e-05, 7.2637856646906585e-05, 5.3615473007084802e-05, 0.00012244061508681625, 4.1261675505666062e-05, 6.7285436671227217e-05, 6.3501553086098284e-05, 7.6840056863147765e-05, 0.00010795181151479483, 4.8060377594083548e-05, 6.4870291680563241e-05, 5.1569870265666395e-05, 4.2197836592094973e-05, 0.00024413627397734672, 7.8341821790672839e-05, 7.8741213656030595e-05, 0.00021213904256001115, 0.00014577756519429386, 0.00018643555813468993, 4.7190256736939773e-05, 6.7153188865631819e-05, 7.3387571319472045e-05, 5.3737603593617678e-05, 6.0126771131763235e-05, 7.1656999352853745e-05, 5.0162645493401214e-05, 0.00023716280702501535, 0.00048318930203095078, 6.3922845583874732e-05, 0.00021230113634373993, 4.1351438994752243e-05, 6.3551677158102393e-05, 5.3879855840932578e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ 45,38,27,-35,72,57,-47,66,-6,102,1,46,-37,42,-13,48,30,81,41,-65,-74,82,-4,51,64,32,33,53,-34,-43,-10,80,-20,1,-83,63,59,-127,-42,20,7,-36,57,-7,-16,-64,-75,-21, 
  /* [1][0][][] */ -51,1,-74,-42,11,87,-53,16,-7,-35,-45,41,54,-10,-25,-18,-37,-27,-8,14,-61,49,-104,-43,-48,-33,50,61,-27,-26,34,-39,17,-61,-30,40,10,-60,127,-26,-13,27,-46,-8,36,47,32,20, 
  /* [2][0][][] */ 13,0,61,-39,-18,-82,12,28,102,76,-61,14,114,-55,127,81,-66,-25,-29,19,90,-79,-35,-103,22,-39,32,-59,41,47,-41,22,33,-31,51,48,-61,14,9,-33,27,35,50,-17,19,-74,86,-57, 
  /* [3][0][][] */ 33,12,-28,-18,29,108,14,-24,35,-47,30,-23,-43,-4,0,37,-25,-63,35,-127,-17,-15,-25,-29,-42,88,126,62,-14,-42,37,39,51,-25,84,52,-50,-54,1,29,14,20,-22,-12,23,24,-8,-23, 
  /* [4][0][][] */ 100,-6,5,-51,84,83,52,-2,62,-6,-104,24,53,-34,15,-11,-76,-125,-29,-94,-26,23,-46,-48,-72,127,-97,119,-57,-50,29,79,24,-34,2,-26,-2,20,-28,19,-50,-13,-7,43,-47,103,-32,-60, 
  /* [5][0][][] */ -3,2,-55,12,-16,61,26,-37,64,62,35,101,54,-23,34,0,-46,127,-9,44,8,1,-71,-22,33,6,-72,-45,-25,37,15,-27,-43,-1,37,17,-49,13,-94,4,92,-22,32,53,-17,1,-41,35, 
  /* [6][0][][] */ 44,12,15,82,-3,-34,111,-65,-4,62,127,88,25,56,-51,40,34,-22,-67,80,47,-66,-44,57,-101,107,84,-5,113,52,-25,-10,85,-62,-106,-15,83,45,3,3,15,61,58,-34,61,119,34,-9, 
  /* [7][0][][] */ -85,-10,-27,18,-56,-51,25,41,71,108,-41,-72,-86,10,-22,-19,-61,97,6,119,-41,26,20,30,-28,-86,-26,-70,25,37,6,8,-31,11,13,-26,-5,-49,127,-6,-2,44,15,-12,59,70,-11,4, 
  /* [8][0][][] */ -14,-100,48,-71,56,-56,73,-42,-35,-120,26,0,-25,-12,33,25,8,3,-44,108,4,42,-17,26,63,-9,-78,-33,-127,-21,-57,-120,-3,-63,2,106,8,40,111,13,10,-4,75,117,-13,-70,-54,77, 
  /* [9][0][][] */ 17,-28,23,-60,39,69,-46,42,18,-23,-37,-20,13,-51,113,-19,16,-120,42,40,-80,30,52,-52,-25,-71,-22,81,66,72,-39,-14,-53,26,-21,127,-40,-47,-49,-35,-35,6,37,100,59,91,-64,18, 
  /* [10][0][][] */ -17,25,-33,-15,21,33,-69,-37,43,32,66,-14,-29,-10,48,-53,-56,127,6,48,8,-13,25,34,-54,41,7,100,39,2,-37,2,68,15,-4,28,-8,-46,-32,16,-85,5,29,-13,20,49,36,37, 
  /* [11][0][][] */ -31,60,-24,39,31,62,-5,14,11,21,-127,-81,78,11,-12,-52,11,24,-39,-59,-1,-13,110,-4,51,8,-17,43,-5,26,-6,57,21,-7,-56,19,45,81,110,9,21,-29,53,-9,-51,-12,87,-5, 
  /* [12][0][][] */ -74,9,31,24,-65,-55,2,-3,-46,-28,-127,18,61,-95,15,23,45,97,83,-107,-39,44,-38,-80,-9,-7,33,-34,11,21,-20,57,62,89,35,-20,-51,-20,25,5,-38,12,63,-10,31,-22,-38,-34, 
  /* [13][0][][] */ -59,-99,-44,-91,13,25,56,11,-106,34,114,-58,34,68,122,4,106,23,-9,-85,66,-86,127,4,-87,12,-17,13,-36,-112,-110,1,42,-33,-68,47,11,-62,83,-80,-7,55,83,38,62,-30,117,-71, 
  /* [14][0][][] */ 62,17,-55,10,-40,19,-92,-35,-29,73,61,43,-19,-56,13,-49,50,-113,21,-3,95,-66,22,-8,-14,127,-88,3,-51,-30,-89,13,121,41,85,-32,-87,8,-16,46,-21,-44,108,-19,-59,-36,-50,47, 
  /* [15][0][][] */ -68,15,29,23,90,1,-3,34,17,73,-8,69,57,-11,-46,-25,11,41,5,-37,21,-43,-50,-58,32,-72,-36,58,-22,13,21,9,-60,2,127,-24,-99,18,56,-24,-46,-19,30,-9,-41,-31,-10,14, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.0057354243472218513, 0.0066355578601360321, 0.0054164794273674488, 0.0059301885776221752, 0.0042927139438688755, 0.0059442655183374882, 0.0039449427276849747, 0.0065882755443453789, 0.0034993740264326334, 0.0039255772717297077, 0.0068435287103056908, 0.0078235315158963203, 0.0054732915014028549, 0.0034048974048346281, 0.006764883641153574, 0.0062376530840992928, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -1544, 9980, -18312, 5101, 14329, -16809, -41678, -10860, -4549, 9005, -15393, -11061, 6122, -12290, -2931, -1243, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.00013495115854311734, 0.00015613077266607434, 0.00012744657578878105, 0.00013953384768683463, 0.00010100503277499229, 0.00013986507838126272, 9.2822185251861811e-05, 0.00015501824964303523, 8.2338214269839227e-05, 9.2366528406273574e-05, 0.00016102420340757817, 0.00018408309551887214, 0.00012878332927357405, 8.011523459572345e-05, 0.00015917373821139336, 0.00014676831779070199, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 67,30,5,100,-127,-36,94,58,60,118,-6,79,11,-19,31,84, 
  /* [1][0][][] */ -30,22,-94,0,127,111,11,26,-47,12,-80,39,-69,121,-67,-38, 
  /* [2][0][][] */ -41,57,79,-15,64,88,3,43,36,-6,32,-14,45,-127,-9,11, 
  /* [3][0][][] */ 127,-31,13,13,34,38,-6,14,22,29,-76,-43,-35,44,-65,52, 
  /* [4][0][][] */ -76,14,-8,-10,-124,6,-59,-57,-33,37,-15,-68,-22,14,-22,127, 
  /* [5][0][][] */ -107,47,41,35,127,9,24,17,-60,24,-24,41,-43,57,-49,-14, 
  /* [6][0][][] */ -127,31,-49,36,-15,-62,77,10,13,-41,-47,23,8,2,-52,20, 
  /* [7][0][][] */ -13,67,39,-59,67,20,127,39,11,17,7,42,119,44,-25,8, 
  /* [8][0][][] */ 0,-36,-75,63,-64,72,-63,-75,61,-20,98,65,127,36,-118,-19, 
  /* [9][0][][] */ -33,-127,-40,120,-43,-85,2,102,32,62,39,88,-106,26,6,-25, 
  /* [10][0][][] */ -27,-46,-56,28,-127,75,57,-31,64,-69,52,-61,22,104,-54,40, 
  /* [11][0][][] */ -33,-110,-43,36,35,103,15,-4,-8,51,33,-80,20,103,-127,99, 
  /* [12][0][][] */ -40,-83,-91,127,-108,-120,37,94,71,38,-20,78,-26,-53,-26,10, 
  /* [13][0][][] */ -48,-26,-19,-2,-2,-1,28,21,-4,127,7,-1,52,34,25,-23, 
  /* [14][0][][] */ -127,-21,-42,-41,-42,84,-38,-117,116,-73,84,-24,50,-78,-75,-79, 
  /* [15][0][][] */ -1,-127,84,-54,-56,-33,-3,51,25,-47,-80,-37,63,-41,-19,-44, 
  /* [16][0][][] */ -16,-25,29,-33,35,20,-26,-35,72,-127,40,-23,-1,-10,-84,-103, 
  /* [17][0][][] */ -15,22,30,-76,23,-15,-29,20,95,-71,39,91,127,-88,-19,-109, 
  /* [18][0][][] */ 45,20,-46,-127,2,-15,115,-49,22,36,-19,62,3,57,-12,-89, 
  /* [19][0][][] */ -66,-50,-4,-62,-83,68,-37,16,64,-46,28,-127,-28,-21,-45,-6, 
  /* [20][0][][] */ 18,101,92,-106,68,-8,-57,76,-104,-127,37,-87,-54,85,-17,-5, 
  /* [21][0][][] */ 18,-51,-117,19,40,-7,80,87,-69,-91,2,-3,91,-127,-28,-7, 
  /* [22][0][][] */ 46,-4,92,-6,20,3,68,25,1,127,12,15,9,1,88,-16, 
  /* [23][0][][] */ -127,-73,-35,57,46,41,20,2,-27,18,-26,-126,5,7,71,88, 
  /* [24][0][][] */ 17,-11,21,43,10,-96,-4,-58,8,127,-107,73,-33,-59,73,-57, 
  /* [25][0][][] */ 86,-69,75,125,51,-14,-15,53,-127,66,58,-56,-41,25,81,-2, 
  /* [26][0][][] */ -26,16,6,44,-51,123,-12,33,-61,-41,-81,28,9,23,43,-127, 
  /* [27][0][][] */ 44,-1,2,-51,-51,-5,-96,5,-89,-17,-68,-46,-88,52,-25,127, 
  /* [28][0][][] */ -60,31,12,-9,4,-5,-127,-27,-6,-50,-21,-39,37,-73,-60,-29, 
  /* [29][0][][] */ -43,-119,-41,83,-39,5,127,-4,64,54,-118,51,8,-26,-47,91, 
  /* [30][0][][] */ 46,-28,-44,-9,-127,28,48,-44,50,17,-9,-38,-2,7,-16,43, 
  /* [31][0][][] */ -127,-3,-2,82,-46,3,-45,-23,-52,-57,-22,-65,-14,-51,-51,90, 
  /* [32][0][][] */ -127,-75,-94,-11,-77,-37,0,-34,119,70,-83,-61,51,58,37,-14, 
  /* [33][0][][] */ -15,-9,-114,64,-127,-96,49,18,-116,5,-42,-70,-40,108,55,73, 
  /* [34][0][][] */ 35,28,6,70,-47,-50,36,4,1,-127,-14,61,-15,26,41,94, 
  /* [35][0][][] */ 22,51,-93,-47,-127,20,96,-67,39,67,-11,-16,7,63,53,87, 
  /* [36][0][][] */ -22,-9,-82,19,127,29,66,83,-63,1,-73,-97,28,-33,-37,17, 
  /* [37][0][][] */ -124,27,-27,-65,44,-82,-37,-72,-19,-43,-39,53,89,-90,-6,-127, 
  /* [38][0][][] */ 45,103,37,-12,-109,-88,-127,-63,-62,-77,60,62,-66,-95,109,-17, 
  /* [39][0][][] */ 4,-52,-12,75,-18,47,62,-16,-37,25,35,-20,-20,127,25,97, 
  /* [40][0][][] */ 89,27,61,70,-66,-62,-21,12,-112,59,-20,-16,-75,-29,127,17, 
  /* [41][0][][] */ -19,-6,11,48,-103,107,8,44,-57,20,-106,-4,29,0,55,-127, 
  /* [42][0][][] */ 3,-106,37,-11,127,19,32,9,-14,-69,-89,-24,-37,-13,14,26, 
  /* [43][0][][] */ -56,-101,-22,29,115,-2,-22,127,-77,-56,-118,-77,78,5,-46,54, 
  /* [44][0][][] */ -38,-62,-72,-76,23,64,50,24,-36,-127,-65,65,-52,30,67,93, 
  /* [45][0][][] */ -23,-45,-65,-20,-127,64,-25,-69,18,-36,20,-38,-13,15,-6,46, 
  /* [46][0][][] */ 24,-90,-18,-13,100,-93,-25,91,-19,-14,32,56,-81,-75,64,-127, 
  /* [47][0][][] */ -87,-28,-42,111,-32,-1,45,24,-16,86,76,91,-23,75,36,127, 
  /* [48][0][][] */ 27,-17,-91,-101,42,-66,10,61,42,-81,-4,16,-68,17,-53,-127, 
  /* [49][0][][] */ 30,77,27,38,-25,-22,60,77,-36,127,-24,36,-29,-54,83,83, 
  /* [50][0][][] */ 5,0,15,11,-127,-30,-22,-52,53,33,23,60,-16,-57,24,-12, 
  /* [51][0][][] */ 12,-13,-9,-127,-54,98,45,-37,5,8,44,-63,63,61,-18,-1, 
  /* [52][0][][] */ 7,-2,-2,-81,87,-100,-2,-42,16,2,127,-37,44,12,-23,101, 
  /* [53][0][][] */ -28,-44,53,-34,-47,-127,17,-93,-9,99,-77,70,-43,-40,26,-85, 
  /* [54][0][][] */ 45,62,25,-2,-127,-53,-60,-78,-30,-1,57,59,-66,-36,60,30, 
  /* [55][0][][] */ 4,17,-36,65,-32,22,53,-26,-8,127,11,46,-2,12,-4,56, 
  /* [56][0][][] */ 85,-108,-125,62,-118,77,3,46,123,43,109,80,-26,-54,75,127, 
  /* [57][0][][] */ 41,40,76,-127,78,-1,-1,-60,40,-22,6,105,37,-85,120,-43, 
  /* [58][0][][] */ 98,-36,14,-98,-4,-1,-6,127,60,111,1,91,36,15,72,1, 
  /* [59][0][][] */ -54,45,45,-68,22,-53,10,-11,21,13,-127,-109,-76,-69,53,1, 
  /* [60][0][][] */ 14,-21,37,29,10,-19,7,-64,-3,127,-10,46,-10,-27,-17,-15, 
  /* [61][0][][] */ 78,107,53,-29,-89,-127,-6,-79,-63,-13,-26,38,-47,-38,107,98, 
  /* [62][0][][] */ -37,91,-18,35,-26,127,-42,24,-52,26,-48,33,-8,53,57,-86, 
  /* [63][0][][] */ 19,-3,-37,-127,-5,-16,94,-25,17,-76,-33,9,-27,61,10,-27, 
  /* [64][0][][] */ -27,-7,-3,-2,41,-71,15,83,-127,-22,-66,-44,-34,72,53,53, 
  /* [65][0][][] */ -80,-42,-52,-22,71,103,-15,-91,-127,-99,12,-36,-85,75,-98,55, 
  /* [66][0][][] */ -12,55,-3,32,-39,127,-21,19,-57,20,-39,38,-29,47,47,-79, 
  /* [67][0][][] */ 15,-18,-31,-28,32,-59,59,-93,10,30,6,127,-43,-14,-40,-121, 
  /* [68][0][][] */ 12,-127,-5,54,31,15,32,95,53,52,42,38,-42,31,10,-5, 
  /* [69][0][][] */ 2,57,90,-86,37,-5,-42,101,22,88,42,92,113,-84,66,-127, 
  /* [70][0][][] */ 39,21,46,-19,88,-2,-85,-44,-127,-80,-7,26,-28,64,-110,-11, 
  /* [71][0][][] */ -14,-63,32,-41,82,-33,49,42,-112,87,-127,-59,6,78,-24,62, 
  /* [72][0][][] */ 13,24,48,-4,-55,-36,-99,-73,-26,81,-32,44,25,102,-127,26, 
  /* [73][0][][] */ -16,-29,-34,-35,48,-94,46,-37,52,71,96,-25,23,-17,-84,127, 
  /* [74][0][][] */ 13,17,-24,90,-86,-26,75,16,79,73,32,126,127,12,-48,7, 
  /* [75][0][][] */ -50,64,-45,60,-63,127,-12,45,-53,25,-31,48,-30,79,19,-56, 
  /* [76][0][][] */ -83,86,-63,15,-88,45,-5,6,63,47,-48,-45,47,-88,-127,45, 
  /* [77][0][][] */ 75,70,-127,116,37,49,51,65,22,-12,109,-27,45,37,62,27, 
  /* [78][0][][] */ 2,-39,-2,-64,62,-114,39,-47,32,43,116,-26,17,-9,-24,127, 
  /* [79][0][][] */ -33,68,2,28,-8,-46,-38,3,-127,-6,54,10,104,41,-75,-38, 
  /* [80][0][][] */ -73,32,51,53,78,36,-19,-127,-97,71,-51,-48,-8,-85,40,66, 
  /* [81][0][][] */ 82,84,-36,-3,22,-34,100,95,-125,113,-64,-58,-30,32,99,127, 
  /* [82][0][][] */ 43,80,-21,-42,16,-26,80,-63,34,8,-47,84,127,5,27,-43, 
  /* [83][0][][] */ 6,-30,33,29,-1,17,-41,-91,74,-19,81,10,28,-65,-49,-127, 
  /* [84][0][][] */ -127,-102,-51,-6,-4,70,65,-1,66,77,92,103,45,98,-70,-2, 
  /* [85][0][][] */ 127,3,96,-39,29,-31,-13,119,20,96,-16,17,-85,76,102,10, 
  /* [86][0][][] */ -57,70,-18,6,45,69,7,8,99,56,127,-19,-25,66,-12,-35, 
  /* [87][0][][] */ 7,-64,19,-44,44,-127,26,-35,44,-11,65,-39,44,-37,-40,74, 
  /* [88][0][][] */ -88,83,45,-16,98,-45,3,13,-38,-45,96,-42,31,127,110,-127, 
  /* [89][0][][] */ -32,42,-9,20,-20,127,-18,31,-33,11,-31,28,-10,55,32,-82, 
  /* [90][0][][] */ 68,-65,34,28,127,-4,54,34,-8,-93,-111,-13,4,-16,-64,17, 
  /* [91][0][][] */ -18,53,-25,-32,20,-61,-91,30,-71,16,-112,-109,-127,-59,15,35, 
  /* [92][0][][] */ 45,37,73,31,-127,-94,28,30,-56,27,-11,-25,-30,-72,29,13, 
  /* [93][0][][] */ 12,-127,-95,59,-37,-44,-6,75,83,71,3,31,-16,28,16,-55, 
  /* [94][0][][] */ 84,-1,107,-44,27,-24,-4,45,34,74,5,76,-17,-10,127,1, 
  /* [95][0][][] */ -96,-27,-45,-33,127,6,50,83,-48,-18,-104,-47,-4,38,-37,62, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.0030669383704662323, 0.0021056719124317169, 0.0034354575909674168, 0.0043068216182291508, 0.0033766438718885183, 0.0014438525540754199, 0.0030355467461049557, 0.0031805848702788353, 0.0014622693415731192, 0.0020334378350526094, 0.0011886602733284235, 0.0027503103483468294, 0.0020737091545015574, 0.0084179500117897987, 0.0022758946288377047, 0.0025151078589260578, 0.0031407137867063284, 0.0024292815942317247, 0.0046268701553344727, 0.0019533087033778429, 0.0059517691843211651, 0.0016331728547811508, 0.0031560449860990047, 0.0034360582940280437, 0.0016986819682642817, 0.0028620683588087559, 0.0042570154182612896, 0.004857535008341074, 0.0018781792605295777, 0.0038967772852629423, 0.0044214925728738308, 0.0027142930775880814, 0.003953233826905489, 0.00096686580218374729, 0.0023450383450835943, 0.002484502037987113, 0.0028015943244099617, 0.0033955355174839497, 0.0023463398683816195, 0.0026147137396037579, 0.00098938215523958206, 0.0038688075728714466, 0.0030387653969228268, 0.0028986891265958548, 0.0023011767771095037, 0.0021135630086064339, 0.0023401293437927961, 0.0011428148718550801, 0.0051875156350433826, 0.0040632081218063831, 0.0050971042364835739, 0.0029648842755705118, 0.0042171650566160679, 0.0022997381165623665, 0.0022972198203206062, 0.004553401842713356, 0.0020717012230306864, 0.00096529844449833035, 0.0031949237454682589, 0.0026412487495690584, 0.0033634097781032324, 0.0014506265288218856, 0.0042355973273515701, 0.0058297081850469112, 0.0012259639333933592, 0.001119343563914299, 0.0056840130127966404, 0.0037529873661696911, 0.0027000259142369032, 0.0017273413250222802, 0.0054210927337408066, 0.0028737790416926146, 0.0030146229546517134, 0.0034058585297316313, 0.0033189312089234591, 0.0025731269270181656, 0.0036813197657465935, 0.0014008716680109501, 0.0038034443277865648, 0.0018430836498737335, 0.0027806179132312536, 0.0028166759293526411, 0.0028970467392355204, 0.0012453449890017509, 0.0028835609555244446, 0.0018195342272520065, 0.0033314181491732597, 0.0049053053371608257, 0.0040637361817061901, 0.0052587855607271194, 0.0038415056187659502, 0.0019881455227732658, 0.0034418080467730761, 0.0032864105887711048, 0.0019042121712118387, 0.0023922172840684652, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 1495, 5798, 616, 1224, 2909, 9563, -108, 1541, 9524, -775, 11380, 2837, 2273, -32, 3572, 723, 2970, 4046, 8, 6456, 461, 7459, -1397, 1218, -6383, 1271, 1748, 847, 7670, 1264, 2010, 2902, 1838, 13159, 2876, 4124, 3236, 1669, 2954, 2614, 15354, 1175, 2137, 1073, 2719, 6127, 4511, 10072, 906, -603, 986, 3480, 1681, -2902, 4609, 399, 2708, 13743, 676, 1462, 2038, 9315, 2111, -204, 11290, 12520, 977, 2430, 3981, 5269, 1302, 1368, -3020, 2807, 1536, 4055, 60, 8463, 2084, 7732, 2527, 1070, 2455, 11025, -19, 5565, 2988, 1399, -616, 1573, 672, 6264, 2208, 1627, 5156, 4109, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00020178478735033423, 0.00013853964628651738, 0.00022603098477702588, 0.00028336112154647708, 0.00022216141223907471, 9.4996197731234133e-05, 0.00019971941947005689, 0.00020926199795212597, 9.6207906608469784e-05, 0.00013378710718825459, 7.8206190664786845e-05, 0.00018095270206686109, 0.0001364367053611204, 0.00055384688312187791, 0.00014973920769989491, 0.00016547790437471122, 0.0002066387387458235, 0.00015983107732608914, 0.00030441826675087214, 0.00012851513747591525, 0.00039158808067440987, 0.00010745225154096261, 0.00020764743385370821, 0.00022607050777878612, 0.00011176233238074929, 0.00018830566841643304, 0.0002800842048600316, 0.00031959451735019684, 0.00012357209925539792, 0.00025638286024332047, 0.00029090573661960661, 0.00017858299543149769, 0.00026009732391685247, 6.3613544625695795e-05, 0.00015428841288667172, 0.00016346422489732504, 0.00018432685465086251, 0.00022340436407830566, 0.00015437405090779066, 0.00017203131574206054, 6.5094973251689225e-05, 0.00025454262504354119, 0.00019993119349237531, 0.00019071507267653942, 0.00015140260802581906, 0.00013905882951803505, 0.00015396543312817812, 7.5189855124335736e-05, 0.00034130510175600648, 0.00026733291451819241, 0.00033535662805661559, 0.00019507028628140688, 0.00027746229898184538, 0.00015130796236917377, 0.00015114227426238358, 0.0002995844988618046, 0.00013630460307467729, 6.3510422478429973e-05, 0.00021020539861638099, 0.0001737771526677534, 0.00022129069839138538, 9.5441879238933325e-05, 0.00027867502649314702, 0.00038355725700967014, 8.0660531239118427e-05, 7.3645598604343832e-05, 0.00037397144478745759, 0.00024692239821888506, 0.00017764430958777666, 0.00011364793317625299, 0.00035667297197505832, 0.00018907614867202938, 0.00019834277918562293, 0.00022408356016967446, 0.00021836429368704557, 0.00016929517732933164, 0.00024220712657552212, 9.2168331320863217e-05, 0.00025024212663993239, 0.00012126303045079112, 0.0001829467510106042, 0.00018531913519836962, 0.00019060701015405357, 8.1935679190792143e-05, 0.00018971973622683436, 0.00011971362982876599, 0.00021918585116509348, 0.00032273749820888042, 0.00026736766449175775, 0.00034599422360770404, 0.00025274633662775159, 0.00013080716598778963, 0.00022644879936706275, 0.00021622465283144265, 0.00012528488878160715, 0.00015739248192403466, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -37,-5,0,-41,83,-11,31,1,4,-12,-10,-25,2,-8,0,-59,-15,8,12,-11,27,28,-18,47,-3,-15,-22,-9,5,11,31,9,-69,2,-19,-63,-1,-38,-10,-34,-13,-22,31,-28,-12,32,-78,-28,-55,-15,15,59,-72,16,28,-27,3,-10,6,-8,-4,-26,0,-10,-23,-18,-38,-57,-13,30,-4,-5,29,-6,3,4,-29,-9,127,-85,-64,16,-121,-20,-1,-30,-4,-11,-49,-6,32,-42,2,51,16,19, -42,30,61,-80,-32,0,127,-28,5,-14,-32,-18,-35,2,-78,42,-6,72,80,-19,47,127,51,115,22,-7,22,79,120,30,127,-35,-127,-15,-92,-45,-37,-101,127,-108,-36,-127,-13,-22,58,-30,-43,-19,6,-5,52,127,-96,81,-93,-8,-124,-4,-8,31,-6,-127,-109,-19,-45,-3,-10,-98,-13,16,-31,109,-127,-34,15,-34,-127,-127,-13,-127,-59,6,29,-88,92,65,-35,33,-127,-1,39,-9,17,127,-9,-100, -38,-4,6,-22,61,-6,42,-7,-18,19,-4,-26,-6,-9,-5,-26,-10,2,-18,-17,46,13,-28,41,-10,-17,-30,-4,-9,16,13,7,11,3,-39,46,-6,-21,-33,15,-14,-40,27,19,-11,-33,-66,-39,-24,-12,9,46,24,39,29,-31,76,-17,0,-11,-1,-13,-57,-32,-35,-35,127,-53,-8,24,15,10,8,-15,17,21,-24,10,-47,-102,-23,1,-102,-28,35,-42,1,3,-58,-37,-17,30,7,57,10,19, 
  /* [0][1][][] */ -117,-7,44,-48,20,81,-61,-34,1,-31,-22,-23,-127,29,24,69,-14,39,103,21,29,-9,106,-23,25,24,58,-15,-28,8,-27,-3,-100,-15,80,-35,-1,-127,-36,-127,-32,18,109,-32,-59,127,-83,-92,58,63,8,-34,-126,105,80,-53,54,-32,41,-5,-1,-17,100,-70,-51,16,-30,-83,0,-15,-127,2,90,127,-1,-93,-63,-39,-49,-50,-121,9,-93,-72,55,29,-125,42,-56,127,127,-76,127,19,-53,12, 19,127,127,127,-127,-127,54,-83,127,127,-67,-98,-77,127,-21,127,127,-127,127,127,127,-77,45,-127,-127,-127,127,127,-127,127,-53,127,-29,127,127,-92,127,23,19,-24,127,-11,-127,-97,127,-18,127,127,127,-127,127,-93,120,127,-127,127,-127,127,-127,127,-106,102,97,-127,127,127,-7,127,-94,-127,-3,-127,11,120,127,73,50,-58,98,-121,-39,127,68,127,127,81,-127,127,-47,48,25,-13,-78,-19,-127,-23, -127,-38,34,-72,10,46,-57,-20,-41,-18,0,127,-94,35,28,82,-22,47,91,8,27,-16,56,-21,32,4,55,-26,-19,8,6,-5,-83,-27,53,127,2,-100,-79,-93,-39,2,34,-47,-57,-81,-80,-116,59,65,-17,-10,127,64,107,-73,122,-31,48,-35,-1,-33,-127,-74,-82,-7,-42,-61,-17,-15,-58,-13,31,-88,8,127,-42,-33,-66,-25,-127,2,-127,-84,1,34,-105,22,-45,-67,105,127,-34,-7,-67,8, 
  /* [0][2][][] */ -61,-59,-11,-23,45,8,-8,24,-9,6,32,-41,86,34,-7,-23,-2,-6,-54,-19,-32,-17,49,26,-3,-7,4,-8,-19,-7,-38,5,-23,2,15,-47,-12,-39,11,5,-43,42,41,23,26,0,-31,2,-14,27,-12,-14,-8,-5,55,-17,17,-19,15,-23,-13,11,9,77,-47,-24,110,-15,32,21,-28,-8,8,-8,-3,-57,-3,36,-23,15,-10,6,-114,-33,9,0,28,-10,-16,15,34,-27,-5,9,-20,7, -53,-77,17,-116,-19,2,52,127,-60,96,127,-26,5,51,127,94,-11,-40,72,-37,-49,-28,127,60,8,4,54,29,-29,8,-85,-45,-44,-23,-78,-10,-101,-75,80,-59,-32,-51,-8,127,30,-34,15,19,57,-2,2,-6,83,71,-55,-48,-78,-56,45,-57,127,15,101,-2,-74,-42,-19,-64,127,27,-59,4,33,-23,48,-44,-9,-24,7,92,-7,-15,-101,-78,74,-127,-6,15,-66,2,76,-21,10,-89,-40,127, -14,-12,-22,-22,48,1,7,28,-25,6,17,88,94,43,4,-23,-5,1,-32,-23,-41,-15,74,34,-11,8,10,-23,-25,8,-31,1,-16,7,-1,-2,-21,-94,5,27,-38,5,26,-4,19,-23,-12,4,12,14,-1,3,28,3,22,-20,67,-17,25,-19,-3,14,-22,4,-24,-29,-26,16,17,11,-43,-17,-35,-45,10,-29,-2,33,96,6,-5,1,-82,-19,9,4,15,4,-7,0,6,-2,0,2,2,16, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0029644609894603491, 0.012100715190172195, 0.008120829239487648, 0.0059616938233375549, 0.011693160980939865, 0.02395322173833847, 0.0056905425153672695, 0.013362100347876549, 0.016277799382805824, 0.0069618821144104004, 0.014891333878040314, 0.0081783216446638107, 0.0064726960845291615, 0.0062221544794738293, 0.011367926374077797, 0.0083170430734753609, 0.015489086508750916, 0.02061600424349308, 0.0057347039692103863, 0.017307084053754807, 0.0071216612122952938, 0.014309870079159737, 0.0076670763082802296, 0.007532111369073391, 0.11952810734510422, 0.0073294867761433125, 0.010398998856544495, 0.0071876803413033485, 0.015921339392662048, 0.0058272425085306168, 0.008244379423558712, 0.014840343967080116, 0.0043225521221756935, 0.020648539066314697, 0.0079495199024677277, 0.0088602844625711441, 0.014506311155855656, 0.0031920699402689934, 0.0095457695424556732, 0.0033381925895810127, 0.020873639732599258, 0.012947975657880306, 0.013679705560207367, 0.0080543309450149536, 0.0072390614077448845, 0.014034573920071125, 0.0073479101993143559, 0.011104599572718143, 0.0068615595810115337, 0.019066628068685532, 0.0095091862604022026, 0.011528824456036091, 0.0057880058884620667, 0.0085343215614557266, 0.012019122950732708, 0.008314850740134716, 0.0076771988533437252, 0.023991718888282776, 0.022049594670534134, 0.018837345764040947, 0.018447365611791611, 0.013512013480067253, 0.0075967134907841682, 0.0057123573496937752, 0.010124905966222286, 0.020639421418309212, 0.0046231145970523357, 0.0053240619599819183, 0.012008839286863804, 0.020898355171084404, 0.0062434510327875614, 0.013115131296217442, 0.024649206548929214, 0.0077327713370323181, 0.0049500060267746449, 0.0096361516043543816, 0.0043919677846133709, 0.0077328309416770935, 0.003765597240999341, 0.0058530359528958797, 0.0046923370100557804, 0.0089272670447826385, 0.0038170947227627039, 0.0092505132779479027, 0.0027366254944354296, 0.021281320601701736, 0.0048219482414424419, 0.01125764474272728, 0.0040085134096443653, 0.0099371708929538727, 0.0045537138357758522, 0.013925109058618546, 0.014741605147719383, 0.0069123995490372181, 0.0062364242039620876, 0.012190037406980991, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 14460, 1655, -5635, 9652, -1303, 943, 533, -657, 1479, -5488, -1118, -427, 4630, -4541, -2926, -6310, -535, 187, -10680, -1580, -3187, -211, -4120, -2794, 37, 6751, -9623, -3188, 4525, -3061, 2548, -966, 17278, -934, -936, 2769, 1081, 13477, -1116, 11639, 3746, 3819, -2765, 3222, -839, 1890, 7174, 2910, -5754, -79, -5206, -2754, -2156, -4706, -2184, 4163, -298, 2755, -323, 568, -3, 2540, -1026, 5715, 10454, -442, 14831, 13570, -1248, 687, 7784, -8, -68, 2143, -4438, 2059, 11764, 6763, 16505, 16277, 11940, -1905, 17201, 12642, -832, -611, 11641, -6129, 11177, -856, -10453, 590, -1390, -2680, 13032, -3314, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 6.9752022682223469e-05, 0.00028472271515056491, 0.00019107833213638514, 0.0001402751513523981, 0.00027513320674188435, 0.00056360522285103798, 0.00013389512605499476, 0.00031440236489288509, 0.00038300704909488559, 0.00016380898887291551, 0.00035038433270528913, 0.00019243110727984458, 0.00015229872951749712, 0.00014640363224316388, 0.00026748061645776033, 0.00019569513096939772, 0.00036444910801947117, 0.0004850824479945004, 0.00013493422011379153, 0.00040722551057115197, 0.00016756850527599454, 0.00033670282573439181, 0.00018040179566014558, 0.00017722616030368954, 0.002812426071614027, 0.00017245851631741971, 0.00024468233459629118, 0.00016912189312279224, 0.00037461976171471179, 0.0001371115940855816, 0.00019398539734538645, 0.00034918455639854074, 0.00010170711175305769, 0.00048584799515083432, 0.00018704752437770367, 0.00020847728592343628, 0.00034132497967220843, 7.5107527663931251e-05, 0.00022460635227616876, 7.8545708674937487e-05, 0.00049114448484033346, 0.00030465825693681836, 0.00032187544275075197, 0.00018951366655528545, 0.00017033086623996496, 0.00033022527350112796, 0.00017289200332015753, 0.0002612847019918263, 0.00016144846449606121, 0.00044862655340693891, 0.00022374556283466518, 0.00027126647182740271, 0.00013618837692774832, 0.00020080756803508848, 0.00028280291007831693, 0.00019564354442991316, 0.00018063998140860349, 0.00056451105047017336, 0.00051881402032449841, 0.00044323166366666555, 0.00043405566248111427, 0.00031792974914424121, 0.00017874620971269906, 0.00013440841576084495, 0.00023823308583814651, 0.00048563344171270728, 0.00010877916793106124, 0.00012527205399237573, 0.00028256094083189964, 0.00049172603758051991, 0.0001469047274440527, 0.0003085913194809109, 0.0005799813661724329, 0.00018194755830336362, 0.00011647073552012444, 0.00022673298371955752, 0.00010334041871828958, 0.00018194896983914077, 8.8602289906702936e-05, 0.00013771849626209587, 0.00011040793469874188, 0.00021005334565415978, 8.9813998783938587e-05, 0.00021765913697890937, 6.4391191699542105e-05, 0.00050073699094355106, 0.00011345760867698118, 0.00026488577714189887, 9.4317962066270411e-05, 0.00023381579376291484, 0.00010714621021179482, 0.00032764964271336794, 0.00034686131402850151, 0.0001626447046874091, 0.00014673940313514322, 0.00028682441916316748, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ 52,41,9,13,-23,-85,-20,1,-37,-74,34,-16,71,-87,69,17,-84,-51,25,10,63,4,-82,-1,-15,84,110,70,4,86,65,-33,-26,1,-4,-35,35,13,2,-10,104,22,23,-33,0,8,-2,-43,32,-57,84,-26,-61,-14,31,22,7,-53,9,35,-5,32,-64,-4,7,10,39,31,19,-19,3,24,29,47,2,30,56,-50,24,30,-33,34,21,17,-52,-17,-14,54,15,9,-92,-11,34,1,127,82, 
  /* [1][0][][] */ -10,27,-49,0,15,-31,104,-99,-49,-32,-85,-34,5,-26,-14,-38,-9,-27,-21,-25,1,-80,127,-9,-4,14,17,69,-50,8,-26,13,-15,8,3,14,-15,68,-64,79,33,-3,-18,-63,53,-73,6,35,-82,30,32,-94,-51,54,63,46,32,22,-41,8,-53,-29,-19,-25,33,21,107,18,-68,-126,26,-1,9,55,-34,41,-67,-21,87,-53,56,-25,68,-52,-31,-53,-21,16,-10,-45,8,-22,60,-74,-37,33, 
  /* [2][0][][] */ 17,0,13,-18,51,40,-46,35,-55,41,17,-43,24,-11,20,13,17,-21,-127,3,-15,-45,-17,12,-7,-1,-46,11,-40,-13,-13,74,-24,-25,-13,17,-34,19,-38,-20,75,15,10,28,9,50,7,-2,-70,4,-26,12,-13,49,15,-61,26,4,49,33,-14,-2,-10,52,41,12,-39,-3,5,9,-19,-31,32,55,29,69,-49,-13,-25,-29,35,32,35,-18,1,-61,-11,-53,-20,-29,-9,70,-4,-16,88,-26, 
  /* [3][0][][] */ 69,-22,-40,-121,-13,-30,110,-5,21,121,-53,-20,8,-45,-21,57,55,40,-42,31,-66,12,1,1,-36,91,48,-4,-45,-6,-75,59,-37,-6,11,-24,0,-51,-14,55,16,36,3,17,67,-47,-2,23,55,-68,53,-52,114,26,17,-17,-6,-6,-35,-35,-34,71,87,-3,-27,-20,110,-37,-38,-32,-70,9,33,-69,22,-61,28,-56,127,20,-17,-62,-50,-40,-29,-61,97,63,-46,51,-31,9,22,-67,2,60, 
  /* [4][0][][] */ -20,66,23,7,-17,28,-50,-16,14,-42,8,-8,10,42,-31,16,-26,-30,-27,-65,10,-61,-66,20,-31,-42,-26,17,-40,127,-74,-22,-8,-28,-3,-26,51,47,-36,12,17,14,30,-22,-54,-12,39,-32,40,-31,-43,-22,-64,36,34,21,-5,73,-54,14,-44,-47,-28,20,55,16,-61,-15,-2,-6,-18,-74,-20,58,62,70,-19,38,-58,59,17,66,41,-59,39,-51,-9,-80,-39,-57,-56,-17,-1,28,41,-3, 
  /* [5][0][][] */ 9,-16,35,-20,-14,-1,-30,3,32,0,-2,8,-22,-39,29,-19,-17,9,-60,-42,-37,25,-37,7,25,-49,78,-16,-3,53,12,83,-28,-83,33,-4,-40,-35,-6,-6,-62,3,-2,28,4,23,-100,15,-24,5,65,-19,24,-94,3,18,-13,-52,-16,-33,41,37,20,59,-47,-6,107,-27,-3,-39,4,12,-3,40,44,19,6,-23,127,58,-37,-6,-29,33,39,88,5,91,4,-40,-4,20,18,10,-35,42, 
  /* [6][0][][] */ 6,-74,79,30,-25,120,-63,-105,-17,-74,-84,84,-4,17,-17,102,29,24,14,-47,-119,-18,-90,-97,-3,-57,9,76,-104,48,3,-31,40,79,-9,-18,17,-38,53,-32,-62,39,21,-43,20,43,-90,-21,57,48,-76,-121,87,3,-69,-38,40,-28,28,-14,-40,-73,30,6,59,-77,-89,-58,-118,-3,-8,-96,-28,-83,18,-90,72,-2,-90,37,-39,75,26,-101,57,-25,-28,8,-46,81,-111,86,55,-24,61,-127, 
  /* [7][0][][] */ 16,-1,-71,30,-60,5,49,6,-117,3,95,53,-5,-69,-29,-31,-34,25,-4,21,-38,-40,-70,-59,67,62,-8,103,-21,32,14,44,-94,-127,11,116,-29,21,-60,13,-5,-8,24,-84,29,59,60,116,-16,43,-40,13,44,-35,47,-70,-54,43,-102,-14,63,19,24,-36,85,-58,113,-25,-47,-34,64,-17,-7,-39,-84,-28,55,-14,115,-6,-2,-15,-114,-38,54,-1,-62,36,-25,29,29,23,58,-25,98,14, 
  /* [8][0][][] */ 9,-61,-6,3,-15,-13,18,15,-27,5,68,47,12,29,-31,-9,60,8,8,-9,-20,-74,-42,-11,-19,-34,65,2,-14,53,-5,-30,-31,9,-11,-12,-67,-21,25,-34,2,62,38,-40,21,-9,21,-23,44,-34,55,-1,-7,4,-50,1,-15,122,-64,10,-26,-56,-61,-9,-95,-41,-21,16,1,2,33,-19,-18,-127,51,-104,18,8,-49,31,-33,-4,-2,61,72,-69,-38,42,-45,91,37,-17,-48,18,1,-51, 
  /* [9][0][][] */ -37,-45,-37,24,13,41,14,44,-43,7,49,59,-27,70,24,-47,-13,28,-20,-34,-3,37,6,24,-17,14,6,8,44,-1,17,-13,-9,-13,-1,64,-20,6,19,-5,-9,-29,24,-13,16,42,-1,31,-36,22,-1,26,127,20,-7,-14,20,-14,42,14,-34,5,78,11,14,24,83,9,36,-2,-21,26,6,-127,-26,-120,-31,-19,52,-13,-3,33,17,-30,53,3,-48,-1,-11,103,49,25,60,38,-7,27, 
  /* [10][0][][] */ 35,56,12,-11,-24,26,-40,-25,49,-4,-24,11,17,-6,-18,-49,-42,4,12,11,34,-4,-39,-36,14,-16,-105,57,-44,52,4,13,17,29,-17,8,29,-6,-1,-3,26,5,53,-49,-33,-8,8,35,6,20,16,-18,-17,-16,17,19,-21,1,-18,-7,1,-18,2,13,-13,-15,-104,-33,-40,0,40,-27,-7,28,23,6,71,-21,-97,21,-21,35,-30,-4,5,16,-66,-127,-40,25,24,35,47,-26,17,41, 
  /* [11][0][][] */ 46,-25,0,-9,-72,40,19,10,53,-18,-7,-46,34,11,5,-11,-33,58,16,-42,16,30,11,-25,30,19,48,1,12,-47,-30,21,-6,106,-99,11,10,-20,41,13,-51,44,4,3,-38,-6,-21,10,41,-24,-31,-19,-12,7,-62,80,-30,-11,-5,-26,34,14,5,-63,-6,-28,-127,-76,18,-16,-93,26,59,14,-13,-9,49,47,-101,-12,-21,-2,-47,1,-8,-18,64,58,5,-38,40,16,-39,16,84,44, 
  /* [12][0][][] */ 12,12,-37,-13,35,-27,3,42,38,-35,12,5,-4,-6,-3,14,12,-60,-28,-5,-5,59,0,52,-42,-36,-127,-15,84,-24,43,-6,-27,-76,72,-11,38,-8,25,8,-16,-53,28,30,46,-5,25,-31,-72,-10,-42,97,61,-29,13,-71,33,20,-33,-18,7,40,64,-1,-28,-19,24,37,97,20,29,24,2,-2,-14,3,-38,-71,36,-69,14,-43,38,-27,-3,12,-4,-102,-3,20,-46,22,26,94,13,38, 
  /* [13][0][][] */ -35,0,-69,36,33,31,-22,7,23,64,-40,51,-68,-2,59,-46,18,41,52,14,-38,-49,6,-2,30,31,-16,16,11,34,64,-19,-6,56,4,44,23,-29,-26,-46,-13,-22,22,30,43,46,-29,31,-46,50,1,3,-29,-28,50,36,23,-41,-19,-18,8,16,-5,-19,9,79,127,39,8,-6,-41,-14,11,50,-77,47,18,-64,113,-51,0,-30,38,14,22,81,-38,-16,-3,-29,-12,43,28,42,54,60, 
  /* [14][0][][] */ -11,60,22,22,-47,-40,14,50,-63,-22,61,-5,-85,7,62,-21,-33,17,-64,36,-28,18,-87,-1,-52,5,-54,-107,17,7,47,87,-62,35,20,-9,-10,-65,-5,-44,23,-37,38,-47,-10,54,-64,30,3,-38,78,26,-17,29,-33,32,-46,6,16,35,32,52,-10,35,17,-29,-7,-66,36,87,70,45,-61,32,14,6,18,-23,30,5,-67,97,-1,-127,87,-21,-4,9,-100,-18,-8,-13,-22,-4,48,34, 
  /* [15][0][][] */ 52,-42,37,46,53,18,-6,-14,12,32,-62,-5,83,94,-1,-15,6,12,-75,45,5,-15,13,38,57,-33,87,28,35,-40,-34,65,84,34,7,-93,67,69,73,45,68,28,-32,12,-37,-126,46,-27,-56,15,-28,3,-11,-66,-14,42,1,19,-19,17,-11,-74,-43,24,28,28,-84,47,-8,-50,11,-8,-12,-118,-58,-113,-32,6,-127,19,77,-39,49,40,-54,19,-31,-1,39,89,-5,-67,-30,-33,29,-58, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.0038021968211978674, 0.0029658859129995108, 0.0030311779119074345, 0.0034935188014060259, 0.004557089414447546, 0.0060903937555849552, 0.0021818587556481361, 0.0027631907723844051, 0.004274406936019659, 0.0038733778055757284, 0.0055518983863294125, 0.0037740862462669611, 0.0033466191962361336, 0.0036466103047132492, 0.0033316025510430336, 0.0038781866896897554, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -19675, -3792, 1676, -14211, 11676, -14729, 25938, -10490, 11979, -13411, 14051, 11590, -2838, -27716, 2866, 5619, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 8.9463457698002458e-05, 6.9785550294909626e-05, 7.1321832365356386e-05, 8.2200444012414664e-05, 0.00010722563456511125, 0.00014330339035950601, 5.1337854529265314e-05, 6.5016254666261375e-05, 0.0001005742815323174, 9.1138303105253726e-05, 0.00013063290680292994, 8.8802029495127499e-05, 7.8743985795881599e-05, 8.5802596004214138e-05, 7.8390650742221624e-05, 9.1251451522111893e-05, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ -21,84,8,-25,-5,-85,-92,-27,22,-46,35,-21,57,-93,4,-127, 
  /* [1][0][][] */ -64,45,-73,-127,-88,-2,23,31,-35,-16,62,-26,16,70,52,33, 
  /* [2][0][][] */ -30,-27,-102,-48,-9,-46,49,-85,-127,117,68,-5,41,47,-86,124, 
  /* [3][0][][] */ -46,-54,14,-35,-83,10,-63,-127,-21,19,35,-72,-68,-49,-122,-50, 
  /* [4][0][][] */ 41,12,-15,34,-61,-5,-127,48,6,40,27,30,4,3,-39,-49, 
  /* [5][0][][] */ -80,94,-83,-61,30,-49,-42,-90,77,-34,22,-17,39,-127,-80,-104, 
  /* [6][0][][] */ -8,-37,-43,28,-76,65,34,-23,-22,-47,127,-20,4,20,-112,14, 
  /* [7][0][][] */ -56,90,127,-112,33,58,-28,-59,32,74,-86,-22,34,15,43,110, 
  /* [8][0][][] */ -55,44,43,20,41,1,107,127,-81,-40,-82,-115,16,69,-116,-27, 
  /* [9][0][][] */ 40,69,88,42,-126,-19,-58,-100,13,8,127,58,-51,-69,87,-47, 
  /* [10][0][][] */ -23,-127,12,-96,-117,76,32,37,-50,-37,-4,48,-24,75,-124,-4, 
  /* [11][0][][] */ 115,-71,-3,59,-102,-27,34,-12,127,111,-57,39,19,-73,-29,79, 
  /* [12][0][][] */ -111,-97,124,-47,68,0,63,23,58,-42,127,64,-7,10,-124,66, 
  /* [13][0][][] */ 4,-31,27,38,4,14,127,11,-114,18,9,28,-31,77,112,-87, 
  /* [14][0][][] */ 114,-50,127,15,86,94,121,41,70,72,60,31,93,-23,47,-35, 
  /* [15][0][][] */ 12,118,25,-82,66,127,-77,77,-43,-38,-54,-50,-47,115,-44,-72, 
  /* [16][0][][] */ -44,53,98,-48,20,83,19,-4,5,10,-29,22,93,-15,85,127, 
  /* [17][0][][] */ 27,94,84,-127,-5,-33,9,-104,-75,71,-21,25,-73,-17,125,-80, 
  /* [18][0][][] */ -59,9,-68,-124,112,71,-73,-93,-21,45,127,86,-30,95,-61,-4, 
  /* [19][0][][] */ 39,127,84,50,53,-31,6,-14,-20,85,42,100,68,61,-70,25, 
  /* [20][0][][] */ 87,-35,10,89,-55,-5,-24,45,-24,-43,-127,-44,87,-54,17,1, 
  /* [21][0][][] */ -78,-48,-8,118,-8,19,-127,67,28,9,27,31,-32,5,-66,2, 
  /* [22][0][][] */ 18,30,-88,-80,127,31,-33,35,84,58,19,52,-28,7,-37,25, 
  /* [23][0][][] */ -58,32,-22,40,-14,66,92,107,-35,127,-21,-27,-3,60,-62,-26, 
  /* [24][0][][] */ 21,-75,38,1,127,35,81,-44,48,18,69,32,-78,38,4,-7, 
  /* [25][0][][] */ 127,-23,71,4,-24,-24,-57,53,48,-33,-35,-7,97,-51,99,35, 
  /* [26][0][][] */ 77,69,104,81,72,11,-69,-19,-9,39,12,127,50,-66,25,-51, 
  /* [27][0][][] */ -64,28,-78,38,-33,74,27,-87,40,-69,127,9,52,-22,127,125, 
  /* [28][0][][] */ -48,31,-87,-127,43,-78,17,-55,-100,98,-68,23,-20,52,-38,71, 
  /* [29][0][][] */ 90,88,-80,45,40,86,-55,-35,61,65,5,59,-127,2,-28,76, 
  /* [30][0][][] */ -37,104,-107,-93,57,-62,13,-14,-69,42,-94,1,-9,58,-22,127, 
  /* [31][0][][] */ 18,-110,88,48,73,-58,-81,54,-19,-4,25,-34,-94,66,60,127, 
  /* [32][0][][] */ -97,84,-6,44,-127,60,33,80,39,-80,35,-92,34,45,50,83, 
  /* [33][0][][] */ -75,-10,55,84,-26,5,-67,-9,-57,-38,7,-24,-11,-3,-9,127, 
  /* [34][0][][] */ -16,7,-75,-103,60,-25,-40,80,22,0,-13,-35,-85,-23,-58,127, 
  /* [35][0][][] */ 65,23,16,-6,-8,21,-70,3,-16,-127,-32,13,-17,-38,30,2, 
  /* [36][0][][] */ -17,39,-127,-7,30,118,-1,39,-55,15,113,39,-14,18,-82,75, 
  /* [37][0][][] */ 57,72,57,-49,52,-127,47,-19,-120,54,-105,-33,6,21,71,41, 
  /* [38][0][][] */ -35,127,33,-62,25,-3,54,-109,-1,-5,-114,29,-30,-68,-71,20, 
  /* [39][0][][] */ 63,39,-76,-127,-11,-42,-15,-89,9,12,-26,-30,40,-17,-119,-77, 
  /* [40][0][][] */ -38,16,-55,-98,-53,-18,9,-127,-3,-16,-18,-52,53,69,27,66, 
  /* [41][0][][] */ -23,-80,-40,127,-6,-9,-69,-15,-11,-49,70,-62,-64,-10,5,33, 
  /* [42][0][][] */ -13,46,-15,-127,27,17,19,-33,46,-14,-43,17,67,-27,-28,8, 
  /* [43][0][][] */ -13,40,-15,41,120,12,46,24,10,44,16,-64,-127,-47,-4,17, 
  /* [44][0][][] */ 61,-15,7,43,-8,-5,33,28,36,-34,13,17,127,10,-51,-19, 
  /* [45][0][][] */ -11,-113,-59,98,-63,-114,-1,53,61,-10,17,18,-127,118,47,-42, 
  /* [46][0][][] */ -6,-61,32,37,-30,-40,-100,44,-15,-79,85,-1,-8,85,82,127, 
  /* [47][0][][] */ -24,-45,13,97,-7,-7,45,14,-9,-69,-127,-41,43,-19,-72,20, 
  /* [48][0][][] */ -58,102,-26,-13,14,83,-10,-127,12,-36,46,-47,59,-97,-1,-5, 
  /* [49][0][][] */ -67,0,38,-39,-3,2,122,127,-33,-20,-10,27,-50,45,-45,43, 
  /* [50][0][][] */ 61,59,-102,82,21,-127,-35,12,-57,59,-52,-25,24,-85,-95,-39, 
  /* [51][0][][] */ -44,35,-27,67,-18,69,-30,-113,-48,-94,-23,-50,16,-17,-4,127, 
  /* [52][0][][] */ -119,-4,10,16,8,27,44,22,11,-80,-37,-44,-99,-43,-127,1, 
  /* [53][0][][] */ -55,-42,-69,-98,-30,29,17,96,49,-65,-62,10,-4,44,61,127, 
  /* [54][0][][] */ -1,-57,5,0,-49,53,54,7,0,-74,42,3,-21,-18,-127,43, 
  /* [55][0][][] */ 3,-27,-44,14,63,-20,70,69,-58,-80,-127,-33,63,-37,-25,24, 
  /* [56][0][][] */ 65,-47,-65,-38,-127,24,-113,-1,-24,-25,-34,15,115,-13,73,13, 
  /* [57][0][][] */ -49,22,29,-42,98,4,36,64,-29,87,0,-1,-69,87,-127,-33, 
  /* [58][0][][] */ 25,6,-4,-7,49,-1,-53,-47,71,-127,-65,15,-82,-54,-20,59, 
  /* [59][0][][] */ -54,-16,-7,20,24,51,-127,8,53,115,-64,25,-69,14,-13,-6, 
  /* [60][0][][] */ 9,-25,8,14,-127,-35,33,12,-20,24,-1,25,15,-24,55,43, 
  /* [61][0][][] */ 32,42,-71,-23,-47,-8,-127,-69,-40,8,41,107,49,-45,97,25, 
  /* [62][0][][] */ 49,-36,46,-25,-29,34,67,115,-53,127,29,89,41,35,86,121, 
  /* [63][0][][] */ 30,-114,-15,-5,-70,23,44,-26,-11,-16,0,-4,-31,123,127,28, 
  /* [64][0][][] */ -34,14,-127,-52,53,73,47,-39,-20,-112,28,8,89,-17,-50,116, 
  /* [65][0][][] */ -35,-20,58,55,58,-40,61,51,-38,18,-127,-68,30,99,-53,15, 
  /* [66][0][][] */ -44,-103,16,-76,-63,-127,31,-8,24,-19,1,68,-53,-63,-83,79, 
  /* [67][0][][] */ -21,-113,-125,-30,-108,114,-11,-109,-91,-56,-37,-127,6,3,-96,73, 
  /* [68][0][][] */ 127,-12,13,-53,-56,-18,-43,-67,-110,-113,-17,-19,11,-15,14,-48, 
  /* [69][0][][] */ 34,17,68,-33,21,-47,-61,39,-8,127,-49,1,9,29,51,-47, 
  /* [70][0][][] */ 50,-22,-44,94,-127,15,-3,-83,71,99,30,42,40,-34,-8,27, 
  /* [71][0][][] */ 96,-78,127,120,-61,-80,47,-88,111,10,-98,59,67,-88,-6,-21, 
  /* [72][0][][] */ -18,-61,37,87,41,-19,-127,78,69,1,50,15,-38,-47,-56,78, 
  /* [73][0][][] */ 57,25,69,-127,72,-97,-82,28,-68,88,-5,7,11,-58,70,-58, 
  /* [74][0][][] */ 90,32,47,45,-127,-46,27,34,-110,-74,31,-43,31,-72,-4,27, 
  /* [75][0][][] */ 81,127,-111,48,55,67,-7,-17,-25,-21,25,57,-85,75,44,81, 
  /* [76][0][][] */ -68,-29,-11,-32,-83,1,104,14,-86,19,120,49,-60,-119,-27,127, 
  /* [77][0][][] */ -72,127,-18,39,-31,-79,24,96,86,-37,-33,67,-23,63,-31,79, 
  /* [78][0][][] */ 80,36,-105,11,-114,74,-127,-12,-34,11,-47,-31,64,-107,69,112, 
  /* [79][0][][] */ -64,-33,105,26,-3,-43,-20,-55,-41,-3,17,23,-44,127,-22,41, 
  /* [80][0][][] */ 66,74,5,-127,5,45,82,-38,9,26,-32,30,72,-38,-17,-11, 
  /* [81][0][][] */ 23,-46,19,-89,127,37,2,84,102,10,-10,-11,-14,-1,-58,-68, 
  /* [82][0][][] */ 92,30,66,24,102,-127,31,37,12,113,-64,9,-34,-44,37,-82, 
  /* [83][0][][] */ -22,76,29,9,64,47,93,47,-18,46,-34,-44,-82,63,-45,-127, 
  /* [84][0][][] */ -48,-127,-16,114,5,-58,-71,113,-92,61,-55,-1,-119,93,4,-90, 
  /* [85][0][][] */ -103,91,2,1,-5,-18,-70,-18,8,45,8,-110,-91,-81,-127,63, 
  /* [86][0][][] */ 3,52,74,103,18,-33,53,32,10,-2,-33,-89,46,67,-127,-49, 
  /* [87][0][][] */ -24,61,127,-32,-113,-34,20,40,30,-24,19,36,-74,28,-19,11, 
  /* [88][0][][] */ -19,-51,-103,30,22,39,-1,34,-12,-64,-96,-95,127,-13,12,40, 
  /* [89][0][][] */ 30,39,-5,-120,-8,-74,-58,53,127,-28,49,-103,11,-28,87,-65, 
  /* [90][0][][] */ -7,59,9,26,-34,54,46,127,-2,-31,-11,116,53,34,-33,77, 
  /* [91][0][][] */ -43,9,-20,51,94,73,-22,-124,-37,12,2,10,-73,-127,-42,-37, 
  /* [92][0][][] */ -22,73,-16,-4,-127,7,-45,40,-25,50,77,56,-8,-13,77,31, 
  /* [93][0][][] */ 96,54,94,38,-127,-90,32,44,-26,-79,0,-82,54,-42,-29,27, 
  /* [94][0][][] */ -48,-127,27,-108,21,48,-21,14,87,-9,-5,59,24,63,-40,44, 
  /* [95][0][][] */ -60,-45,-20,-51,103,84,-36,45,63,48,-51,58,-24,127,-54,25, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.0015573275741189718, 0.0020097955130040646, 0.0025337510742247105, 0.0025207099970430136, 0.0023847185075283051, 0.0012215386377647519, 0.0014217422576621175, 0.0022681131958961487, 0.002677207114174962, 0.0016273673390969634, 0.0032423657830804586, 0.0017919322708621621, 0.0021726870909333229, 0.0024067475460469723, 0.0029488846193999052, 0.0023994084913283587, 0.0020060553215444088, 0.0013802208704873919, 0.0025106130633503199, 0.0033010072074830532, 0.0025584623217582703, 0.0015148000093176961, 0.0016504771774634719, 0.0022086647804826498, 0.0024326657876372337, 0.0036649969406425953, 0.0012913825921714306, 0.0017270494718104601, 0.0030685190577059984, 0.0027828656602650881, 0.0017539531690999866, 0.0023646065965294838, 0.00097185058984905481, 0.0033348295837640762, 0.0025477230083197355, 0.0025381012819707394, 0.0022752461954951286, 0.0024838638491928577, 0.0019659954123198986, 0.0023773317225277424, 0.0039163418114185333, 0.0030434641521424055, 0.0029083658009767532, 0.0035156495869159698, 0.0042265728116035461, 0.0016252171481028199, 0.0016781114973127842, 0.0029489120934158564, 0.0019081640057265759, 0.002636629855260253, 0.0017923989798873663, 0.0031060012988746166, 0.0031603642273694277, 0.0025007310323417187, 0.0041144923307001591, 0.0030102331656962633, 0.0025902283377945423, 0.0022548316046595573, 0.0017560113919898868, 0.0026451938319951296, 0.0032167979516088963, 0.0020768942777067423, 0.0017371887806802988, 0.0021195418667048216, 0.0019028644310310483, 0.0020999426487833261, 0.0016788085922598839, 0.0024345521815121174, 0.0018307245336472988, 0.00282144988887012, 0.0018458082340657711, 0.0017989155603572726, 0.0032315878197550774, 0.0019720052368938923, 0.001821142272092402, 0.0020623253658413887, 0.0022923676297068596, 0.0024496256373822689, 0.0018821785924956203, 0.0026916053611785173, 0.0024089019279927015, 0.0020887590944766998, 0.0013882549246773124, 0.0031387882772833109, 0.0014013713225722313, 0.0024580147583037615, 0.0033130240626633167, 0.0033298935741186142, 0.00088099302956834435, 0.0029464045073837042, 0.0026001750957220793, 0.0019772301893681288, 0.0010471272980794311, 0.0020491245668381453, 0.0029398621991276741, 0.0025207703001797199, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 6609, 2660, 390, -1034, 4286, 8630, 8362, 1331, -223, 5623, 842, -3964, 3081, 2532, 6, -192, 4359, 6819, 78, 81, 3137, 7447, 6714, -1727, -3245, -242, 8776, 244, 1100, 924, 6443, -1543, 11328, 1901, 3289, -3151, 532, -3160, 427, 1571, 1222, 1142, 1389, -611, 852, 2662, 4557, 2701, 4028, 2438, 5763, 1270, -1457, 1533, 618, 1781, 1754, 2388, 5307, 904, -946, 4332, 4296, 3461, 3758, 4585, -5084, 1892, 4397, -832, 4879, 1328, 1436, 2765, 4246, 1611, -381, 1824, 2781, 2363, 2276, 2640, 7558, 241, 4248, 2878, 409, -1201, 14835, -480, 653, -1883, 11365, 2769, 256, -307, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.00011882699618581682, 0.00015335115313064307, 0.00019332993542775512, 0.00019233487546443939, 0.0001819584722397849, 9.3205679149832577e-05, 0.00010848158854059875, 0.00017306127119809389, 0.00020427590061444789, 0.00012417115794960409, 0.00024739856598898768, 0.0001367277727695182, 0.00016578007489442825, 0.00018363932031206787, 0.00022500539489556104, 0.00018307934806216508, 0.00015306576096918434, 0.00010531342559261248, 0.00019156445341650397, 0.00025187301798723638, 0.00019521544163580984, 0.0001155820646090433, 0.00012593448627740145, 0.00016852523549459875, 0.00018561694014351815, 0.00027964610490016639, 9.8534903372637928e-05, 0.00013177709479350597, 0.0002341337240068242, 0.00021233783627394587, 0.00013382990437094122, 0.00018042390001937747, 7.4154013418592513e-05, 0.00025445371284149587, 0.0001943960232893005, 0.00019366186461411417, 0.00017360552737955004, 0.00018952344544231892, 0.00015000911662355065, 0.00018139484745915979, 0.00029882419039495289, 0.00023222199524752796, 0.0002219137386418879, 0.00026825061650015414, 0.00032249538344331086, 0.00012400709965731949, 0.00012804304424207658, 0.00022500749037135392, 0.00014559646660927683, 0.00020117977692279965, 0.00013676338130608201, 0.0002369936992181465, 0.00024114167899824679, 0.00019081044592894614, 0.00031394342659041286, 0.0002296864113304764, 0.00019763925229199231, 0.0001720478612696752, 0.00013398694864008576, 0.00020183323067612946, 0.00024544767802581191, 0.00015847090980969369, 0.00013255074736662209, 0.00016172499454114586, 0.0001451921125408262, 0.00016022953786887228, 0.00012809623149223626, 0.00018576087313704193, 0.00013968769053462893, 0.00021528189245145768, 0.00014083861606195569, 0.00013726060569752008, 0.00024657617905177176, 0.00015046767657622695, 0.00013895655865781009, 0.00015735927445348352, 0.00017491192556917667, 0.00018691099830903113, 0.00014361373905558139, 0.00020537451200652868, 0.00018380371329840273, 0.00015937621355988085, 0.00010592643957352266, 0.00023949540627654642, 0.00010692724754335359, 0.00018755110795609653, 0.00025278990506194532, 0.00025407708017155528, 6.7221408244222403e-05, 0.00022481616178993136, 0.00019839820743072778, 0.00015086635539773852, 7.9897763498593122e-05, 0.00015635201998520643, 0.00022431697288993746, 0.00019233947386965156, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ 36,100,-16,37,-25,-9,27,70,104,-44,-106,82,-27,-12,40,-43,-127,12,20,93,41,54,80,95,14,-15,-55,4,3,20,24,-18,-92,17,-34,83,-24,58,-18,-20,35,-56,-23,24,-75,-6,20,-12,-22,-58,-56,-33,49,47,-30,-5,-88,-71,-89,-127,-127,9,-110,-10,-25,50,29,6,10,54,32,-11,-49,3,43,8,14,-7,-102,34,13,-41,50,-19,-112,-40,-37,24,-127,4,-63,20,87,-15,55,-12, -29,-22,10,91,6,90,-37,18,75,52,-123,86,-35,-61,-113,103,-72,50,46,114,127,10,108,127,25,19,12,49,13,127,-12,-127,62,75,21,30,67,127,-56,-92,127,-19,58,127,-4,-33,127,-81,22,-114,-107,-59,69,127,-33,-127,4,24,-127,-44,-53,-127,-50,68,-29,90,81,-9,24,127,127,1,-55,17,-41,-85,51,-42,-79,127,3,-38,127,-33,-127,-38,127,48,75,76,-80,-8,127,-40,127,42, 49,-77,19,78,-13,-12,-11,50,46,38,-74,32,-20,41,40,-71,-117,6,55,54,34,41,63,111,21,-66,20,35,6,41,3,-48,-64,-78,-23,70,2,46,-2,-11,10,20,-36,39,0,26,9,-11,70,-111,8,-14,10,-7,18,-33,41,-76,-29,-81,-73,5,-107,-16,37,14,-62,5,-5,36,14,24,-16,-48,-16,7,-13,14,-67,14,2,-108,27,-34,-67,-30,15,-2,-96,-3,-29,27,33,47,35,-5, 
  /* [0][1][][] */ 79,-5,13,127,-2,-58,121,56,-27,-127,-127,127,0,-127,-22,18,-86,-41,109,56,-122,-13,-127,-35,-24,72,-127,127,-101,68,127,71,1,46,-10,127,-97,63,-32,-68,52,-127,-1,-5,-127,-47,7,-126,-118,-105,-108,40,127,-63,89,-27,-127,-1,-91,16,-9,-87,-62,56,-97,-15,127,-53,-41,8,-56,-105,-127,92,127,-127,127,86,-78,-34,127,-74,-43,127,-22,-13,-19,127,10,6,-76,11,5,-101,68,-29, -127,0,-56,93,-118,-127,-127,-127,80,10,-19,62,-78,-115,-32,127,-100,-127,127,127,27,-127,-125,89,-127,127,12,81,-103,11,-90,57,-127,72,127,-8,24,91,127,-81,-52,15,2,9,-41,-127,-92,-127,2,-67,-57,127,72,78,60,-106,25,36,76,10,-2,-23,-127,127,8,-127,101,127,22,23,-111,-62,-15,78,-109,-109,118,127,82,-38,-83,29,-119,95,-7,-63,105,126,125,127,-127,-127,-101,-79,65,127, 58,-6,61,120,-26,-38,15,58,-59,104,-93,100,6,-14,-127,45,-10,-19,45,18,-100,12,-68,-41,-11,21,117,0,127,78,34,-109,-24,-127,-21,114,-127,56,-64,-66,19,61,5,14,-19,-32,-4,-72,127,-127,-67,-4,44,-84,-127,16,93,-4,-117,96,28,-67,-22,49,127,-39,-27,-8,-39,-4,-42,-5,-97,-127,-5,-84,-34,-9,-127,-23,-98,-127,-35,106,-94,6,4,27,-30,-2,10,26,-9,127,18,-9, 
  /* [0][2][][] */ 34,-127,50,4,0,-4,30,41,-47,-64,-1,-25,26,27,30,9,-79,26,43,76,-21,33,15,-43,5,111,-14,-11,-16,30,14,22,-27,-36,-46,27,25,15,30,-3,10,2,-21,-28,-50,-24,-27,50,-20,4,-82,67,-15,-30,-38,-48,-14,6,-8,45,-3,-31,14,-15,-45,65,-37,-34,28,29,-4,91,2,21,32,-25,-100,-58,1,24,21,-19,-27,-54,-101,52,-35,26,-49,37,-10,8,2,0,30,-44, -54,20,127,1,127,55,-26,22,-127,-5,-96,-47,127,-3,-15,9,-39,74,-40,-42,0,23,61,-41,43,22,-20,23,-8,104,3,6,-24,-2,5,-39,67,44,58,-127,-7,0,-127,-1,-68,2,-60,2,-22,-51,-57,118,90,-78,-41,-120,-13,127,-7,14,81,-110,60,45,-30,31,-39,-9,127,3,-14,97,-59,45,-16,-64,-50,-95,-32,-16,-4,-51,-53,-76,-14,127,42,39,118,61,33,11,-20,-21,11,-31, 36,101,47,4,-20,-16,-3,46,-5,47,-44,-7,18,-15,18,57,-119,25,1,27,-15,19,8,-50,0,126,16,19,12,-2,-9,-84,-32,-45,-51,9,30,8,18,-27,6,1,6,1,-37,11,-30,31,43,-2,-127,48,13,-36,13,-8,-1,32,-23,106,-10,-5,-10,-24,29,30,-102,-3,37,7,-14,127,37,4,-9,-5,-55,-34,-26,23,-9,-19,-25,-39,-4,37,-39,26,-60,73,-1,0,-4,18,15,-30, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.015833398327231407, 0.010635894723236561, 0.0057254796847701073, 0.0058744368143379688, 0.011724364012479782, 0.013149037957191467, 0.018685892224311829, 0.0086870621889829636, 0.0087266908958554268, 0.0097393831238150597, 0.0029341669287532568, 0.0094846189022064209, 0.011386338621377945, 0.0054407408460974693, 0.0079544298350811005, 0.0066771185956895351, 0.0035721247550100088, 0.016782918944954872, 0.0045622512698173523, 0.0028300662524998188, 0.009127417579293251, 0.018198791891336441, 0.0093918219208717346, 0.0070832953788340092, 0.033147919923067093, 0.0045086154714226723, 0.014444271102547646, 0.0046310047619044781, 0.0090812556445598602, 0.0030648673418909311, 0.017179088667035103, 0.007703875657171011, 0.0065262387506663799, 0.0087427506223320961, 0.012341966852545738, 0.020230192691087723, 0.0093541219830513, 0.0099458023905754089, 0.014386377297341824, 0.0062137474305927753, 0.0073424410074949265, 0.010395780205726624, 0.012026962824165821, 0.012196534313261509, 0.0032090924214571714, 0.0055346181616187096, 0.0088743781670928001, 0.004827569704502821, 0.010054642334580421, 0.0028777332045137882, 0.0040713753551244736, 0.0044367634691298008, 0.0052596330642700195, 0.0071413479745388031, 0.010122185572981834, 0.0045725703239440918, 0.0089707039296627045, 0.0088454717770218849, 0.004419645294547081, 0.0055339857935905457, 0.0070389034226536751, 0.0056730811484158039, 0.0038521576207131147, 0.0046355933882296085, 0.010460568591952324, 0.011047306470572948, 0.015392988920211792, 0.013843704015016556, 0.010894877836108208, 0.0080854902043938637, 0.008856835775077343, 0.0069860843941569328, 0.0037601646035909653, 0.011282362043857574, 0.014809834770858288, 0.0037586053367704153, 0.0049569099210202694, 0.0096791116520762444, 0.0052411090582609177, 0.010054631158709526, 0.014053354039788246, 0.0052083120681345463, 0.0098620178177952766, 0.0091115124523639679, 0.0028888059314340353, 0.011089112609624863, 0.0054043126292526722, 0.0060777738690376282, 0.013817249797284603, 0.0093455128371715546, 0.0031345312017947435, 0.032769143581390381, 0.0099798906594514847, 0.01157862413674593, 0.0043039866723120213, 0.012422027066349983, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { -2094, -478, -2071, -6358, 2096, 5013, 247, -3545, -1250, -794, 10364, -2921, -640, 8708, 5014, -3834, 25716, 231, -6492, 1647, 470, -401, -1043, -1757, 533, -7333, 949, -3641, -139, -8895, -3443, 546, 12326, 2262, 826, 46, 499, -1958, -111, 9044, -1683, 1843, 3950, -1651, 13594, 8311, 781, 10523, -3110, 10177, 17694, -3628, -593, 1288, -151, 15241, 178, -346, 19588, 3060, 5433, 13990, 12437, -4977, 495, -1185, -1753, 1003, -5668, -1918, 4645, -1002, 8905, -1801, -864, 12593, 2730, -521, 11830, -3574, -169, 11962, 2301, 1514, 14425, -901, -3738, -4760, -672, -4881, 14617, 706, -3719, 715, -5029, -2397, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 0.00037255056668072939, 0.00025025635841302574, 0.00013471717829816043, 0.00013822205073665828, 0.00027586737996898592, 0.00030938914278522134, 0.00043966807425022125, 0.00020440146909095347, 0.00020533391216304153, 0.00022916196030564606, 6.9039226218592376e-05, 0.00022316750255413353, 0.00026791385607793927, 0.00012801743287127465, 0.00018716305203270167, 0.00015710867592133582, 8.4049992437940091e-05, 0.00039489220944233239, 0.00010734709212556481, 6.6589796915650368e-05, 0.00021476276742760092, 0.00042820686940103769, 0.000220984045881778, 0.0001666657772148028, 0.00077995104948058724, 0.00010608507000142708, 0.00033986521884799004, 0.00010896482126554474, 0.00021367661247495562, 7.2114526119548827e-05, 0.00040421384619548917, 0.00018126766372006387, 0.00015355856157839298, 0.00020571178174577653, 0.00029039921355433762, 0.00047600455582141876, 0.00022009699023328722, 0.00023401888029184192, 0.00033850301406346262, 0.00014620582805946469, 0.00017276332073379308, 0.00024460660642944276, 0.00028298737015575171, 0.00028697727248072624, 7.5508061854634434e-05, 0.00013022631173953414, 0.00020880889496766031, 0.00011358987831044942, 0.00023657982819713652, 6.7711371229961514e-05, 9.5797069661784917e-05, 0.00010439443576615304, 0.00012375607911963016, 0.00016803172184154391, 0.00023816907196305692, 0.00010758989083115011, 0.0002110753848683089, 0.00020812875300180167, 0.00010399165330454707, 0.00013021143968217075, 0.00016562125529162586, 0.00013348426728043705, 9.0639005065895617e-05, 0.00010907278920058161, 0.00024613103596493602, 0.00025993664166890085, 0.00036218797322362661, 0.00032573423231951892, 0.00025635006022639573, 0.00019024683570023626, 0.00020839614444412291, 0.00016437846352346241, 8.8474465883336961e-05, 0.00026546735898591578, 0.0003484667104203254, 8.8437773229088634e-05, 0.00011663317854981869, 0.00022774380340706557, 0.00012332022015471011, 0.00023657956626266241, 0.00033066715695895255, 0.00012254851753823459, 0.00023204748868010938, 0.00021438853582367301, 6.7971908720210195e-05, 0.00026092029293067753, 0.00012716029596049339, 0.00014300644397735596, 0.0003251117595937103, 0.00021989442757330835, 7.3753675678744912e-05, 0.00077103869989514351, 0.00023482096730731428, 0.00027243822114542127, 0.00010127027780981734, 0.00029228298808448017, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -125,44,43,-41,-88,-20,-50,-21,-61,18,-27,-22,37,40,45,-25,18,-4,101,10,-7,-42,127,88,55,15,4,33,-65,-123,-86,-11,-52,-52,19,-5,-9,17,15,33,-10,-5,-94,20,-69,-28,10,83,-29,-12,-46,-8,-2,-10,36,-67,-105,14,-13,79,52,14,-15,2,-22,-75,-44,-6,-57,-86,34,-6,-1,19,-71,-63,-39,8,-47,-3,-59,51,93,-83,2,73,-9,37,20,-10,0,-19,-5,-28,-74,24, 
  /* [1][0][][] */ 45,9,46,-24,-51,-29,-11,15,-4,-6,60,-59,-5,-10,-77,-26,-8,15,-73,33,8,-100,-12,45,-23,-71,1,-38,64,-82,111,-58,69,35,11,74,47,82,-36,-49,42,24,19,-28,22,60,-127,-44,-33,-46,-8,-20,39,-31,-38,56,-7,-21,-39,18,23,49,3,-110,-22,-8,-47,8,21,-4,-83,0,-29,-46,23,-68,10,27,38,-71,-25,2,-100,-13,38,-75,-5,33,-74,-36,-67,35,3,63,-24,62, 
  /* [2][0][][] */ 85,-33,-1,4,24,-73,61,4,-3,-6,-19,-23,-84,-19,6,-40,-93,-56,-23,49,-1,-38,-20,35,1,-77,13,-37,-46,31,-58,127,-63,115,-41,-5,-13,-23,-6,0,-108,81,58,11,-70,3,2,-19,37,7,-54,-60,44,-15,-7,56,42,-10,40,-14,17,48,-37,5,75,10,-6,-1,14,29,-51,10,33,50,65,32,37,-74,73,44,96,-30,-31,20,-63,61,12,63,17,26,-20,39,-44,42,-21,42, 
  /* [3][0][][] */ -6,-2,-40,-2,11,0,1,-60,-22,60,18,53,16,-2,-35,23,15,-36,26,10,-2,127,52,-42,14,25,-19,2,60,-43,53,-29,-36,25,-36,-42,7,38,37,15,-73,-36,-37,12,-38,19,33,-3,-30,-41,-11,-19,27,-74,-15,-46,17,58,-20,0,1,-26,-45,11,25,33,-45,-5,-29,-12,9,-41,-37,-34,24,-27,17,-11,-35,-21,-14,-17,-35,-5,-12,-6,16,-24,12,24,29,2,59,19,-45,42, 
  /* [4][0][][] */ 30,15,-53,13,40,40,-52,10,-16,93,87,-22,-27,10,17,-63,27,-16,-18,59,10,-29,79,81,-75,1,-127,9,-44,-64,10,11,-67,-53,4,29,-4,44,15,48,-37,-47,45,-30,-11,-7,-30,53,-54,63,4,17,41,-16,-72,15,55,-32,10,-15,61,1,19,15,-28,20,-54,9,-62,36,-53,68,33,-74,-37,-68,35,-59,-9,17,-40,87,-71,-7,-42,35,44,-62,66,7,34,27,-69,-39,30,21, 
  /* [5][0][][] */ -90,47,23,-24,28,-11,68,-55,-33,56,-22,-9,50,-36,-8,-47,0,-39,37,9,-127,-3,-76,39,-20,-3,41,12,53,-76,-7,26,39,107,-28,24,-18,12,56,-19,-29,79,69,-31,-8,55,40,-10,-20,4,-18,44,18,-60,20,-101,44,-37,-51,-47,37,71,-72,-9,65,-63,-76,-93,-59,-32,-26,-29,-16,32,-28,-57,13,-40,-61,-17,105,-45,37,-94,-84,69,11,-27,-46,52,30,2,13,37,-16,76, 
  /* [6][0][][] */ 14,-3,-54,21,-39,-105,96,89,-75,67,-7,80,-86,-89,60,68,5,-73,-15,-20,-2,-30,-84,-75,-36,51,67,40,44,44,92,-51,12,28,16,-24,20,0,25,43,17,10,-40,-12,-3,-44,-94,18,21,-109,0,86,38,2,-43,-45,74,69,15,8,-127,28,-81,7,25,-6,9,44,43,24,16,-70,-14,27,91,41,61,-27,12,-77,-24,-48,-72,64,25,-54,23,11,-51,46,41,9,-8,11,-33,87, 
  /* [7][0][][] */ 52,91,-66,-64,-17,-12,29,5,-59,22,-68,-53,-56,20,6,-10,-51,-14,-24,73,-5,127,29,31,-7,-9,29,18,36,42,63,-17,69,25,-11,-27,2,-18,8,52,-67,10,6,-86,8,-69,93,-21,45,-69,-108,-40,-62,24,33,-10,13,-8,-94,1,5,94,14,-14,-18,-22,-20,26,-33,-38,-89,28,-7,76,-39,27,-44,67,29,-91,2,-58,67,-66,34,3,-19,20,1,70,-89,69,66,-40,-41,31, 
  /* [8][0][][] */ -18,81,-53,23,-46,-17,-78,15,-97,-10,-12,0,-31,30,43,73,15,-53,11,2,16,14,13,-4,-27,69,1,17,-7,-37,-44,-47,-32,-50,-36,-93,-49,11,48,25,-6,-48,18,24,-34,-50,13,-17,-42,-31,44,70,-5,-30,-67,80,-29,38,8,-40,-36,6,-4,61,-39,-67,-44,-21,-45,0,5,-1,-28,-31,-118,-28,-48,21,-71,-27,-31,-12,-33,-46,-16,24,11,13,17,61,-52,1,-67,-127,9,-48, 
  /* [9][0][][] */ -20,0,-52,57,-10,-26,61,73,4,44,-20,82,-39,-16,31,124,14,-4,82,21,44,24,49,-103,-58,-10,15,-10,16,-28,54,55,-29,-10,-5,-127,23,2,-34,-16,0,24,44,-33,-11,0,8,18,26,94,34,-16,-58,-73,-1,-2,9,-12,77,-26,-73,72,-58,-26,104,9,-41,15,-81,43,41,57,-2,73,-21,-24,-18,10,-42,5,58,-18,63,7,22,-36,4,-33,-51,21,1,-10,38,29,-36,-4, 
  /* [10][0][][] */ 80,-2,-70,-9,-45,-32,64,-12,16,-47,-29,-8,-98,-10,-7,-2,-79,-5,10,16,41,16,29,6,-33,70,49,-24,-61,-78,-52,-3,86,-44,58,-21,70,-102,82,127,1,-48,2,2,-18,-103,-9,49,42,74,-102,-57,-17,30,34,31,7,-65,67,41,-7,64,-56,-27,-17,-69,33,61,21,-38,-18,27,97,68,9,-80,16,-39,74,-23,-22,9,31,24,-60,5,12,50,-43,12,38,75,41,54,-30,27, 
  /* [11][0][][] */ -52,-35,29,-90,20,-11,-32,-49,45,-47,-4,-6,-21,8,10,-5,-69,3,68,14,-75,39,-48,-87,20,14,-39,26,24,-86,25,-24,14,-7,14,-63,-82,3,-112,35,-87,79,-71,51,20,-3,17,-50,22,-38,-95,-74,8,41,105,-75,-29,-75,25,-53,-13,-43,-29,-127,8,-82,93,88,113,5,69,-19,-61,7,64,-40,112,41,42,41,46,-36,-19,98,71,46,-14,-16,-74,-48,-6,35,59,35,52,89, 
  /* [12][0][][] */ 9,-20,29,-44,18,100,-3,43,28,83,4,70,35,35,24,-2,-49,22,13,27,127,-10,45,-73,29,15,-71,-63,0,68,17,-3,18,-9,-3,-29,49,-5,-23,-32,35,-33,38,74,-8,41,-33,-16,-82,8,24,38,-13,-43,-15,19,-20,95,24,59,-4,-91,17,-89,-10,84,-10,-53,-13,-38,79,-13,4,26,-3,59,-13,38,-98,-5,-39,23,104,24,-6,64,-45,-77,52,13,-62,27,73,14,-21,-98, 
  /* [13][0][][] */ -33,20,20,-31,-39,-10,8,-21,3,-17,-24,-52,72,-105,-22,-77,-8,-43,-80,-31,-75,-40,9,69,-30,7,99,20,25,-46,64,37,2,-2,-117,127,-23,-42,20,-56,123,6,0,18,-4,-88,27,-37,57,-4,-19,41,28,-10,-17,66,80,-29,-29,-5,28,33,3,-67,7,51,-38,27,-73,-13,-64,1,-45,8,-34,-71,-90,13,17,85,-24,68,35,-79,62,28,25,-16,-32,-18,-5,-8,-55,17,-20,-26, 
  /* [14][0][][] */ 5,14,-72,-17,98,78,-100,5,46,-54,67,-10,-18,-12,-38,-68,-67,37,51,127,18,-26,11,-1,-27,23,-30,64,-1,-14,-37,19,64,-1,-18,-16,-15,62,60,22,66,4,30,-7,-17,-48,63,-56,28,-13,-17,-24,55,33,-9,12,15,44,-94,-16,1,-53,-32,-98,28,-40,-48,20,-76,54,-14,44,-10,-50,-27,-37,47,-11,-39,-24,45,9,-3,-10,-8,23,7,-13,-14,57,60,21,0,-52,-25,-58, 
  /* [15][0][][] */ -61,-52,72,-58,8,-40,-29,-62,-5,16,9,71,17,-45,14,96,-127,-15,0,-72,56,-53,-33,-76,48,-12,49,-43,-56,-92,-47,46,-31,54,87,-66,17,-31,18,-44,-19,1,23,3,3,12,46,97,-22,-18,30,-43,-36,48,-2,-43,-83,15,110,15,-55,27,-83,18,-67,9,37,25,54,-61,89,-50,77,-16,-22,-24,13,27,49,2,-26,78,37,58,14,-29,-119,18,-29,-40,-79,-6,43,-20,-10,62, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.0023505529388785362, 0.003360633971169591, 0.0025384861510246992, 0.0040070749819278717, 0.0032796377781778574, 0.0038110988680273294, 0.0032585533335804939, 0.003619080176576972, 0.0050980104133486748, 0.0026993101928383112, 0.0036354828625917435, 0.0026612959336489439, 0.0038000938948243856, 0.0028324662707746029, 0.0044586434960365295, 0.0034936121664941311, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { 13164, 10033, -1411, 5417, -580, 12620, -238, 4607, 18998, -4774, -3985, 7677, -13682, 10217, 970, 4818, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 5.5307129514403641e-05, 7.9073739470914006e-05, 5.9729085478466004e-05, 9.4284121587406844e-05, 7.7167947893030941e-05, 8.967291796579957e-05, 7.6671843999065459e-05, 8.5154832049738616e-05, 0.00011995319073321298, 6.3513180066365749e-05, 8.5540777945425361e-05, 6.2618732044938952e-05, 8.9413973910268396e-05, 6.6646265622694045e-05, 0.00010490926069905981, 8.2202641351614147e-05, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ 3,107,-104,33,66,-36,125,51,-65,-14,26,-99,100,127,-82,20, 
  /* [1][0][][] */ -28,12,-68,-29,-18,50,33,-127,24,-50,-23,-65,-5,-45,-68,12, 
  /* [2][0][][] */ -31,-15,28,70,25,37,-76,127,-12,9,68,-42,-6,-58,-26,61, 
  /* [3][0][][] */ 80,-68,74,-1,-8,-35,-37,127,-31,59,69,38,-10,51,16,8, 
  /* [4][0][][] */ -49,-9,-12,31,-92,5,-19,-127,-7,-10,35,-29,40,39,92,121, 
  /* [5][0][][] */ 127,22,-25,-52,-103,10,29,75,15,-22,73,83,126,20,-103,18, 
  /* [6][0][][] */ 3,-29,-75,-79,-91,-11,11,-75,-69,-65,-33,17,103,49,127,3, 
  /* [7][0][][] */ -60,53,-26,-71,4,-59,-76,15,-99,46,-60,-64,-127,-40,16,83, 
  /* [8][0][][] */ 53,47,78,6,54,30,84,7,75,-26,36,4,-127,-28,-87,9, 
  /* [9][0][][] */ -37,60,20,-45,-23,-19,30,-36,-24,54,-51,7,50,127,21,26, 
  /* [10][0][][] */ 65,59,-40,25,-38,-26,41,-45,-86,-43,-47,-100,-127,-85,-5,103, 
  /* [11][0][][] */ 55,-3,67,11,-18,-32,-1,118,-90,23,-12,10,-18,0,54,127, 
  /* [12][0][][] */ -49,-13,-5,-8,24,1,127,14,-58,32,-20,-37,11,87,-39,103, 
  /* [13][0][][] */ 14,69,7,31,89,19,94,64,-41,127,-101,-89,45,86,-114,-28, 
  /* [14][0][][] */ -127,125,-1,-37,-4,-14,68,-16,-43,35,90,-27,-83,7,-50,48, 
  /* [15][0][][] */ -13,-22,-127,-42,57,-48,-85,-20,-22,-12,-17,-71,-9,-59,-59,54, 
  /* [16][0][][] */ 117,-22,15,-3,29,-26,33,-7,-48,26,127,59,41,13,-29,8, 
  /* [17][0][][] */ -1,18,-32,-102,-21,-69,125,-127,-15,-23,-41,28,41,75,-12,69, 
  /* [18][0][][] */ 22,127,-5,-47,79,-87,-41,-49,-50,119,-24,0,-42,53,-12,-33, 
  /* [19][0][][] */ -76,-106,126,-84,58,-127,24,-52,54,62,68,77,20,-23,76,-43, 
  /* [20][0][][] */ -13,84,58,5,0,1,10,-8,58,-2,96,-26,-127,-25,-64,-8, 
  /* [21][0][][] */ -83,52,50,10,91,32,68,34,-127,71,-57,21,-36,7,-54,-41, 
  /* [22][0][][] */ 20,-70,22,11,3,-108,127,9,8,-63,-25,-63,44,-48,-34,-37, 
  /* [23][0][][] */ -65,-114,44,79,40,-16,28,-70,28,-30,74,-7,14,87,96,127, 
  /* [24][0][][] */ 7,6,20,95,48,12,-72,-127,63,14,-52,2,-6,2,-15,-41, 
  /* [25][0][][] */ -32,34,22,-62,-17,-16,32,-67,-21,60,-59,-13,52,127,18,10, 
  /* [26][0][][] */ -62,71,6,23,38,-89,3,-42,22,24,4,84,10,-2,-97,127, 
  /* [27][0][][] */ -30,-127,-50,-7,-73,90,0,-66,17,-35,57,-40,40,-49,-108,-10, 
  /* [28][0][][] */ -25,11,32,88,30,15,-38,-127,-105,51,92,-16,70,10,-33,-34, 
  /* [29][0][][] */ -127,118,-24,-32,-22,24,-115,-80,-40,-23,-14,-11,12,-59,-102,52, 
  /* [30][0][][] */ 35,75,-53,71,-92,-95,-61,-28,-26,6,-11,-119,127,22,-13,85, 
  /* [31][0][][] */ 123,43,-66,-66,-81,7,127,27,-72,-30,71,49,49,7,-45,28, 
  /* [32][0][][] */ -25,-24,127,10,-15,78,82,24,-8,-13,-14,30,17,73,75,36, 
  /* [33][0][][] */ -25,26,-60,-66,-23,13,127,7,-5,-11,15,-77,90,107,-62,59, 
  /* [34][0][][] */ -100,-13,99,1,17,-61,83,-8,-127,30,43,-40,29,48,-48,-25, 
  /* [35][0][][] */ 5,5,-64,12,-74,126,-34,-37,-11,127,-1,97,-55,84,34,31, 
  /* [36][0][][] */ -16,-67,127,-52,-56,11,-48,-1,6,18,-40,82,-6,-76,-37,50, 
  /* [37][0][][] */ 50,9,60,-45,99,-100,-9,20,-83,127,-56,-8,-87,-40,111,7, 
  /* [38][0][][] */ 70,23,25,-79,10,-40,-120,76,-81,54,-115,-42,-85,-127,-117,47, 
  /* [39][0][][] */ -78,15,-43,-42,-82,-79,56,24,-127,-34,33,94,20,-10,-8,52, 
  /* [40][0][][] */ 127,64,0,-123,-89,33,29,-39,-45,-36,-56,-119,13,41,19,57, 
  /* [41][0][][] */ 77,-79,-59,-71,-3,-24,-62,-36,79,-17,8,-49,127,-98,66,-33, 
  /* [42][0][][] */ -25,-78,-29,121,24,-116,-127,8,11,14,0,45,-95,64,-51,-12, 
  /* [43][0][][] */ -82,-44,-46,-127,-51,7,-3,79,51,-119,-48,33,-27,-62,-41,81, 
  /* [44][0][][] */ -53,38,44,-53,-43,-42,19,127,89,-61,96,102,80,41,-25,15, 
  /* [45][0][][] */ 29,89,-84,107,127,-109,-50,-80,109,-79,79,-76,-35,11,-75,69, 
  /* [46][0][][] */ -15,-53,30,8,108,-21,23,43,-7,127,-23,-105,17,60,-49,64, 
  /* [47][0][][] */ 78,-32,-32,-8,85,-13,-44,-57,2,127,-35,25,-8,-102,-73,1, 
  /* [48][0][][] */ -5,29,-21,-105,-4,-56,127,-127,2,3,-42,26,59,66,-12,38, 
  /* [49][0][][] */ -32,127,-54,29,58,-65,44,45,-28,7,32,-86,-53,55,80,-95, 
  /* [50][0][][] */ 7,36,-18,-7,-127,-5,-67,-47,52,63,33,24,-40,-43,-10,40, 
  /* [51][0][][] */ 127,-51,-52,-6,-47,97,-94,-34,59,-16,-61,44,-28,-77,-6,43, 
  /* [52][0][][] */ -1,-56,44,83,-55,-109,-127,26,-59,-71,-25,-67,6,-50,23,73, 
  /* [53][0][][] */ 24,116,63,-127,13,118,99,-13,-16,-30,-12,-36,82,-113,14,51, 
  /* [54][0][][] */ 18,127,9,-34,-4,-97,-104,46,1,-16,-40,111,77,78,12,65, 
  /* [55][0][][] */ -34,-1,61,32,36,-32,93,127,-93,-24,31,8,103,56,-3,-7, 
  /* [56][0][][] */ 127,30,22,31,-40,97,-54,-71,-15,37,-73,16,-71,81,-7,20, 
  /* [57][0][][] */ -34,-40,-48,-6,-73,-108,76,-41,-127,-27,44,66,18,36,1,34, 
  /* [58][0][][] */ 46,-46,63,23,12,-63,-30,-1,23,-14,-127,-21,17,-32,-28,37, 
  /* [59][0][][] */ 71,34,-127,89,10,33,101,-49,-89,-62,24,-116,-116,-71,29,122, 
  /* [60][0][][] */ -9,47,2,18,-10,-29,-39,9,-37,-63,58,113,-57,-127,-35,-10, 
  /* [61][0][][] */ -47,27,92,-114,-73,36,5,115,-28,-92,48,64,79,-20,-8,127, 
  /* [62][0][][] */ 79,53,0,-127,-3,1,-2,-47,-10,39,-51,45,18,-32,-81,-89, 
  /* [63][0][][] */ -4,-29,10,-12,-75,-80,-73,14,-82,-11,-27,-18,127,1,50,-7, 
  /* [64][0][][] */ 11,0,-19,43,-83,-43,-5,-108,58,127,24,-1,44,-64,-34,104, 
  /* [65][0][][] */ -33,-6,-1,-26,-92,65,13,-25,56,-105,106,-59,62,53,-127,72, 
  /* [66][0][][] */ -127,84,-78,-86,23,-48,-97,-44,-105,88,91,-19,-118,-64,10,65, 
  /* [67][0][][] */ 9,-35,-127,-108,82,91,4,-31,-10,-4,44,-11,28,39,32,39, 
  /* [68][0][][] */ 50,45,-11,-54,-62,40,28,28,-61,64,127,-24,-5,-54,-124,3, 
  /* [69][0][][] */ 73,-104,51,-66,4,-116,-6,127,7,52,99,93,-10,64,-30,15, 
  /* [70][0][][] */ 39,4,93,14,96,-17,127,7,46,12,-58,27,-52,30,-48,34, 
  /* [71][0][][] */ 5,43,107,-76,-127,-84,3,18,-31,-13,25,-107,-94,-6,7,32, 
  /* [72][0][][] */ -60,-85,10,-119,68,-16,21,21,-59,15,-127,-25,64,112,-47,110, 
  /* [73][0][][] */ -3,18,47,-2,127,-99,-20,3,-40,109,-75,31,-70,-48,125,-12, 
  /* [74][0][][] */ -122,23,-127,-90,55,-63,-66,34,-112,7,-116,-41,-60,-62,-47,105, 
  /* [75][0][][] */ 98,-26,49,-26,30,18,-127,-22,-3,-83,50,10,1,-8,11,-27, 
  /* [76][0][][] */ 5,-53,-19,121,36,89,76,-51,93,-127,70,115,18,-94,-67,36, 
  /* [77][0][][] */ -41,-41,127,-11,38,-29,-15,-111,19,32,38,79,49,48,15,-2, 
  /* [78][0][][] */ -46,-1,24,-26,6,-61,18,-4,28,-13,9,-93,-127,-79,-122,-70, 
  /* [79][0][][] */ -127,-78,-56,-10,126,55,12,57,28,8,-3,57,-29,-70,-87,0, 
  /* [80][0][][] */ 13,-110,45,127,-27,-6,-95,111,2,31,73,14,-68,4,1,60, 
  /* [81][0][][] */ 105,77,-25,73,-10,37,33,127,19,5,127,50,119,24,51,-11, 
  /* [82][0][][] */ -40,12,11,-17,45,-107,-127,-75,0,72,-47,-29,-27,93,-49,-38, 
  /* [83][0][][] */ 113,-12,73,-27,-30,-19,-127,-24,29,-97,3,-56,-14,-8,20,-32, 
  /* [84][0][][] */ 15,-49,-71,27,127,35,20,12,-113,19,-110,-28,30,-47,-51,0, 
  /* [85][0][][] */ 24,54,53,-43,103,13,25,-81,127,-49,29,-9,69,-86,24,-5, 
  /* [86][0][][] */ 126,-32,127,54,-11,-49,103,40,-68,-60,-100,-52,52,29,-62,15, 
  /* [87][0][][] */ -4,5,28,-76,75,-16,-48,20,39,-30,67,-29,-78,-127,-3,17, 
  /* [88][0][][] */ -65,-36,39,-10,18,26,-63,-52,-10,15,-63,-127,-44,-37,-19,-10, 
  /* [89][0][][] */ -80,18,21,-63,26,6,-127,18,83,30,-76,-7,-11,-64,-40,-32, 
  /* [90][0][][] */ -32,-10,-51,-113,127,15,-58,35,50,79,54,-23,44,27,-78,-13, 
  /* [91][0][][] */ -41,-78,10,82,-51,0,-1,63,-55,-59,3,-66,11,85,35,127, 
  /* [92][0][][] */ -42,86,9,-27,-41,60,-118,79,-64,-16,97,13,-51,127,50,43, 
  /* [93][0][][] */ -16,73,-43,-57,48,67,-71,21,44,57,77,63,-127,24,-33,77, 
  /* [94][0][][] */ 18,76,109,-12,-127,-43,9,-21,10,-34,31,-18,-64,-35,8,-23, 
  /* [95][0][][] */ -25,61,27,10,127,-21,-99,71,-2,18,-94,61,-9,22,110,-49, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.0016419076127931476, 0.0030865643639117479, 0.0031697202939540148, 0.0017017045756801963, 0.0016881758347153664, 0.0019061724888160825, 0.001632596948184073, 0.002711060456931591, 0.0020234193652868271, 0.0027667025569826365, 0.0019573874305933714, 0.0023847785778343678, 0.0018128239316865802, 0.0017576159443706274, 0.0023699104785919189, 0.0028940960764884949, 0.0033506513573229313, 0.0026946605648845434, 0.002119935117661953, 0.0013279507402330637, 0.0025567612610757351, 0.0021328988950699568, 0.0023646815679967403, 0.0018819308606907725, 0.0023874538019299507, 0.0024727846030145884, 0.0024443217553198338, 0.0028381510637700558, 0.0018598519964143634, 0.0025473725982010365, 0.0014960113912820816, 0.0019222398987039924, 0.0028670686297118664, 0.0015387708554044366, 0.0017768149264156818, 0.0016791959060356021, 0.0028409652877599001, 0.0018809280591085553, 0.0016917712055146694, 0.0016230361070483923, 0.0020615265239030123, 0.0020691570825874805, 0.0017404836835339665, 0.0020685081835836172, 0.0024404488503932953, 0.0020248966757208109, 0.002151974244043231, 0.0021137953735888004, 0.0016075758030638099, 0.0028258436359465122, 0.0031886615324765444, 0.0018730951705947518, 0.0014071717159822583, 0.001425001653842628, 0.0026025802362710238, 0.0022415837738662958, 0.0025814240798354149, 0.0018034349195659161, 0.002849578857421875, 0.001797334523871541, 0.0025796922855079174, 0.0019264817237854004, 0.0021400668192654848, 0.001983442809432745, 0.0017098727403208613, 0.0018312671454623342, 0.0019603376276791096, 0.0016655978979542851, 0.0021662202198058367, 0.0020003004465252161, 0.002455452224239707, 0.0017123500583693385, 0.0019965763203799725, 0.0019012106349691749, 0.0018444268498569727, 0.0015606853412464261, 0.0018005925230681896, 0.002173904562368989, 0.0018069783691316843, 0.0022039930336177349, 0.0010713071096688509, 0.0016532992012798786, 0.0019760732538998127, 0.0020588596817106009, 0.0027239399496465921, 0.0019436428556218743, 0.0028958430048078299, 0.0019268959295004606, 0.0020890033338218927, 0.0020951561164110899, 0.0022370745427906513, 0.0016270460328087211, 0.0017514602513983846, 0.00226779212243855, 0.0026681199669837952, 0.002507171593606472, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { 1274, -69, 1997, 4272, 3326, -1898, 3169, -826, -1674, -491, 2786, -1737, 2599, 2903, 1067, 1115, -347, -236, -1464, 4176, 1697, -724, 1419, -728, -824, 2215, 1014, 978, 3824, 1482, 3107, 1028, 1050, 3491, 3162, 2658, -240, 2053, 2066, -3148, -389, 1279, -128, 1255, -833, 445, -1121, 552, -3576, 726, 610, -2389, 4789, -1200, 1147, 836, 926, 2132, -466, -1465, 134, 896, 332, 2831, 3616, 2094, 1729, 4091, 2774, -721, 1909, 3685, 2189, -1384, 3411, 4985, 882, -2666, 630, 1103, 7642, 1479, -571, -1683, 615, 656, 832, -1817, 2524, -330, 2490, 1159, -10, -1575, -275, 922, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.00018250710854772478, 0.00034308867179788649, 0.00035233193193562329, 0.00018915387045126408, 0.00018765007553156465, 0.00021188160462770611, 0.00018147217633668333, 0.00030134935514070094, 0.00022491424169857055, 0.00030753426835872233, 0.00021757443028036505, 0.00026508132577873766, 0.00020150539057794958, 0.00019536871695891023, 0.00026342863566242158, 0.00032169476617127657, 0.0003724434063769877, 0.00029952640761621296, 0.00023564249568153173, 0.00014760905469302088, 0.00028419814771041274, 0.00023708349908702075, 0.00026284743216820061, 0.00020918701193295419, 0.00026537867961451411, 0.00027486367616802454, 0.00027169985696673393, 0.00031547617982141674, 0.00020673283142969012, 0.00028315454255789518, 0.00016628993034828454, 0.00021366759028751403, 0.00031869052327238023, 0.00017104287690017372, 0.00019750279898289591, 0.00018665190145839006, 0.00031578898779116571, 0.0002090755442623049, 0.00018804971477948129, 0.00018040943541564047, 0.00022915005683898926, 0.00022999824432190508, 0.00019346438057255, 0.00022992611047811806, 0.00027126938221044838, 0.00022507844551000744, 0.00023920382955111563, 0.00023496003996115178, 0.00017869092698674649, 0.00031410812516696751, 0.00035443733213469386, 0.00020820487407036126, 0.00015641491336282343, 0.00015839681145735085, 0.00028929117252118886, 0.00024916441179811954, 0.00028693955391645432, 0.00020046175632160157, 0.00031674644560553133, 0.00019978366617579013, 0.00028674706118181348, 0.00021413908689282835, 0.0002378802455496043, 0.00022047062520869076, 0.00019006180809810758, 0.00020355546439532191, 0.0002179023576900363, 0.00018514040857553482, 0.00024078733986243606, 0.00022234444622881711, 0.00027293708990328014, 0.00019033717398997396, 0.00022193048789631575, 0.00021133007248863578, 0.00020501823746599257, 0.00017347879474982619, 0.00020014580513816327, 0.00024164150818251073, 0.00020085563301108778, 0.00024498600396327674, 0.00011908170563401654, 0.00018377334345132113, 0.00021965145424474031, 0.00022885363432578743, 0.00030278097256086767, 0.00021604663925245404, 0.0003218889469280839, 0.0002141851291526109, 0.00023220425646286458, 0.00023288818192668259, 0.00024866318562999368, 0.00018085516057908535, 0.00019468448590487242, 0.00025207761791534722, 0.0002965762687381357, 0.00027868596953339875, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 10,30,34,-66,-87,3,-29,93,-15,-41,-97,-99,-112,116,-70,63,5,57,47,2,-20,-77,-39,6,111,-108,-38,77,55,-80,54,-9,-102,65,21,-54,-43,33,-69,-24,-101,-80,115,-82,50,-2,-96,102,-114,127,-85,16,-11,43,14,26,-43,-114,5,28,-7,73,34,-108,41,-118,-75,19,30,-76,-6,115,-80,61,-34,114,-64,-85,-15,-15,-93,28,85,68,-47,-113,-52,-38,43,60,18,48,-69,-94,-32,78, 
  /* [1][0][][] */ 49,27,103,60,21,-73,10,60,57,13,-45,2,-96,-69,8,-52,-38,-60,3,5,106,71,-34,-68,41,-6,-25,-29,105,42,-21,-58,-44,-61,-59,-40,36,-32,-26,-46,-14,116,-1,20,22,29,-57,50,-37,-93,8,-21,6,-51,-53,-51,43,24,82,-3,42,-89,15,-21,106,0,-10,121,78,60,87,98,-15,27,45,82,112,-73,110,51,-30,127,-62,62,66,100,-56,16,-11,-23,100,-42,-37,17,33,37, 
  /* [2][0][][] */ 21,-38,-114,-127,-25,17,76,2,27,-4,-52,-60,58,91,-52,-88,-91,62,-24,36,-90,-13,41,22,-85,91,-31,-28,-3,-16,-61,33,50,-46,64,5,-75,24,-79,56,69,-12,87,63,-68,-16,85,25,26,-38,-4,97,-82,-40,5,-58,-31,27,67,108,80,67,-41,97,109,85,-60,-57,-3,5,56,-27,55,6,1,-77,97,123,-95,-76,-99,91,72,26,-49,34,53,8,69,49,101,95,-49,-11,56,49, 
  /* [3][0][][] */ -65,110,22,-117,111,116,82,102,91,51,51,-55,114,53,127,122,-125,99,-35,111,-80,96,-69,8,109,93,-85,30,59,54,-32,118,-104,40,38,-96,-83,-40,-74,-38,-68,-31,-73,35,-74,-96,-1,-29,-28,119,-28,-86,14,71,103,-64,-85,-90,67,-79,-75,40,-86,-25,22,99,-37,-32,-33,-46,74,10,100,98,-40,-92,-112,-2,83,-81,35,90,-64,-90,80,-116,101,-96,-33,-122,100,101,-89,-44,32,-68, 
  /* [4][0][][] */ -96,3,86,-4,50,-1,-33,-39,21,33,-94,-51,-73,72,28,-101,68,15,-40,-71,-81,62,-108,-34,-25,-127,77,30,6,-103,101,23,-100,33,-51,-57,84,-22,-101,-93,88,62,-90,-95,-15,85,-64,-43,66,-25,101,85,84,-119,-8,31,-113,-25,87,-57,74,-26,-25,71,-56,25,-104,-81,26,87,29,1,-75,-13,14,-52,-35,71,-32,50,36,-100,43,15,26,127,6,-71,-22,-11,75,56,93,-33,-85,-109, 
  /* [5][0][][] */ -85,109,-65,-70,26,-18,-49,83,-40,-67,54,51,-71,31,114,103,-109,127,113,-7,97,23,-50,101,-98,48,-25,-53,-30,43,63,1,-77,66,67,41,104,-54,-53,-19,85,-6,-13,-45,101,109,23,-9,39,110,92,48,-79,-32,45,-40,86,-37,-63,72,64,71,-15,60,70,-50,57,38,90,-53,20,7,-91,97,22,-99,-57,86,29,-27,57,81,-76,-37,44,-48,-94,-5,71,95,-42,107,-21,92,10,95, 
  /* [6][0][][] */ 92,-27,-4,-90,-111,-40,49,-127,26,57,20,95,40,-107,-48,112,-78,90,5,84,-114,69,74,39,31,27,-118,-115,-69,-112,-6,38,-117,6,46,63,-126,-94,-18,38,-97,38,96,-7,-123,84,-109,-35,70,76,-4,-38,-87,-125,-72,-113,-87,-21,-8,78,33,-59,71,-1,121,85,-46,45,-17,-87,-59,-31,58,-78,81,111,-55,48,-70,-82,25,-38,-33,-105,60,-11,-29,108,-23,-95,-109,-39,-89,-12,97,-108, 
  /* [7][0][][] */ 93,79,-65,-98,116,6,-4,-50,55,-24,7,-57,-14,104,115,85,76,39,-42,68,84,-84,26,-33,96,-25,83,127,-69,-1,16,32,-122,-6,86,-22,122,-1,11,-79,-69,63,-44,89,24,-34,-40,-33,104,-69,-8,124,-27,62,57,37,52,-74,20,-77,33,-57,-14,-32,34,-27,-74,-59,59,-78,-97,18,-54,55,-1,51,-36,-35,-42,1,-84,28,14,44,-48,-70,1,-76,48,100,126,-61,19,-63,65,-121, 
  /* [8][0][][] */ -30,-57,-118,-15,65,8,-15,-116,74,-100,111,-97,-24,-113,-115,-14,27,83,58,-88,83,43,83,-50,-89,-101,15,-100,-83,-91,-95,5,-34,8,-107,110,-127,-115,-64,-68,-16,23,27,-23,22,-63,-22,78,68,80,-38,-31,104,18,-7,-89,-6,5,-31,21,-109,-11,-120,94,-21,-27,-9,-63,-77,19,-121,45,42,69,108,79,91,-13,-31,-34,27,123,-27,55,62,-52,-31,57,45,39,-72,79,-93,108,104,-63, 
  /* [9][0][][] */ -36,-37,14,74,31,74,78,78,-25,59,82,94,113,53,-10,-19,-4,-53,-39,-75,-74,106,13,-25,-39,-70,-34,57,64,-102,-31,60,-103,-68,124,-39,-12,16,-53,-36,126,75,17,25,63,70,30,-15,-40,-25,-88,-71,-101,32,37,71,-15,-69,28,17,26,-48,27,82,-127,90,100,53,114,-52,-124,35,47,57,77,-117,101,-47,27,-92,-120,-59,114,-54,51,-112,-114,48,-65,120,4,19,-74,30,67,88, 
  /* [10][0][][] */ -104,27,-49,-68,-52,83,-127,-74,62,-119,79,89,-14,23,71,-13,111,-12,-65,40,11,-57,-62,82,60,80,-32,-37,-111,-77,-26,-107,59,21,95,-102,121,-57,60,121,67,14,44,61,5,24,-28,7,-119,112,97,92,102,-114,94,46,21,-13,82,-17,90,70,86,45,-47,95,12,39,10,6,79,37,-106,-75,19,68,48,93,80,5,17,40,26,46,10,67,-102,61,6,65,-72,93,60,71,42,25, 
  /* [11][0][][] */ 96,76,-97,-127,89,1,-44,-45,-96,66,50,6,37,-50,70,-65,-112,97,5,-35,-46,-8,77,-74,-106,104,87,93,4,61,5,44,48,90,-98,-84,32,121,-39,-49,67,-101,92,-89,85,36,-61,-20,78,95,-66,101,59,-51,-43,-86,-33,87,-101,84,-16,13,114,-56,66,-20,111,0,90,109,-60,23,-66,-15,36,-118,-3,120,-69,-15,-120,-36,-109,86,20,-76,-33,1,-84,27,-16,-50,74,32,112,-8, 
  /* [12][0][][] */ -73,-68,-71,104,-9,-56,-69,-53,-26,10,-39,28,-69,-67,-42,73,14,-52,48,107,-78,-9,64,34,9,82,-104,-37,101,-71,56,55,23,-40,-1,-76,-15,-67,81,63,63,55,55,-102,24,10,-54,86,-92,122,-63,34,-50,-114,78,40,6,-99,-74,-108,49,-36,106,-23,-93,-24,15,-72,-121,-111,39,-19,-113,-41,-3,-12,-127,-35,89,-51,25,55,106,14,72,-62,-27,-60,-49,-58,0,-13,-98,-89,-101,105, 
  /* [13][0][][] */ 45,39,96,-41,95,42,35,-36,9,-109,46,55,-5,84,40,78,88,34,12,79,116,-10,-10,-67,103,-78,2,-56,34,-73,-39,-3,-11,-96,27,10,70,-81,84,56,-5,-72,72,97,72,3,38,71,-118,80,-31,2,-17,-117,15,78,45,-43,82,-55,-82,14,73,-38,-76,47,-19,-101,-62,-47,-78,99,-39,1,101,-4,-39,82,-5,-44,84,51,3,127,101,-36,-97,88,-32,-28,17,-17,73,103,-3,-45, 
  /* [14][0][][] */ -42,-44,46,33,53,-67,6,-8,-14,80,-49,-88,13,117,-13,45,-120,0,-21,-82,-34,45,-57,-30,-41,-13,86,25,59,-71,73,-52,-55,101,113,24,40,61,-91,-87,100,115,101,30,60,-108,34,-29,-67,-4,-18,-76,-32,-81,64,-120,10,-92,-40,-108,-127,-100,25,5,12,57,16,-7,-104,-4,38,-69,-75,-73,62,-53,-115,34,45,13,92,-61,115,6,-65,-55,-85,53,52,-17,-44,-33,-37,-108,-107,-87, 
  /* [15][0][][] */ 38,73,-54,-96,-76,98,27,51,-84,-7,101,-44,2,-42,-32,-24,-27,116,-71,23,-23,-41,-33,-14,-6,19,101,123,16,-51,-100,37,76,109,-5,-41,-32,112,-35,-70,-36,127,81,-44,79,56,-56,-86,74,-22,-52,-54,-72,35,30,36,40,2,84,-33,-84,-74,-80,-44,-36,38,-14,-54,-17,-86,-102,7,82,63,7,71,-4,116,-89,-40,-58,-65,-34,-52,-26,-36,116,-56,52,-102,-55,91,-17,-42,89,-75, 
  /* [16][0][][] */ -1,30,-103,97,83,-49,88,127,-51,56,86,-41,-41,82,-89,-19,33,91,-29,-20,-100,-1,-94,17,113,-58,-59,27,-48,104,106,38,-80,-38,23,2,-4,92,-95,82,58,27,77,-37,-74,-4,-78,-51,-10,56,94,65,-31,-96,58,5,30,95,-36,-47,52,-7,-7,59,-6,38,82,-47,7,-44,60,25,75,17,53,-82,72,-24,-83,-65,-32,7,5,-83,84,-76,-8,-85,104,-83,77,-91,48,28,84,-78, 
  /* [17][0][][] */ -42,81,-116,-37,-43,19,-59,106,22,-54,92,-17,-49,92,28,-68,23,67,-30,70,12,-11,-67,-21,-100,-8,-43,-90,-50,37,49,-116,54,-56,-38,27,47,-49,-28,37,-59,104,-2,-89,97,9,-88,-97,20,-127,-18,-120,-83,2,31,14,-74,72,-64,-78,105,89,61,71,-65,21,-87,60,-78,-53,13,-30,-48,-32,-10,39,-125,-52,103,-93,-66,-23,85,-59,68,32,-62,107,10,123,-42,51,-108,-55,66,-24, 
  /* [18][0][][] */ 58,-64,-5,27,52,15,-74,-95,-24,18,-31,-47,-1,69,15,29,25,44,-67,-31,-26,29,28,29,11,-18,27,-66,-5,-81,39,-73,-13,65,79,-32,14,-31,-30,-79,-64,20,92,-43,-13,60,62,-46,35,13,-9,-53,-4,-10,-10,27,68,19,-68,59,-55,-16,63,85,4,32,-76,-66,88,-17,-43,87,-79,64,-7,127,26,26,9,-20,8,-7,-77,93,4,-29,87,61,56,14,-29,96,-49,17,30,-74, 
  /* [19][0][][] */ 70,66,-111,46,94,62,-39,-12,86,-10,5,-65,59,82,89,-34,15,-60,-27,93,-88,-62,47,90,48,12,18,-15,75,33,102,-91,57,-8,-66,66,-104,-27,-69,-2,67,45,35,27,-51,43,-58,82,127,37,58,-9,45,-46,61,92,50,4,-84,-32,-51,37,100,-28,87,-8,-74,85,84,-24,-81,-5,22,61,15,70,22,73,-64,95,-103,-48,84,-81,40,18,90,-104,-66,-21,6,-1,-32,-40,51,-115, 
  /* [20][0][][] */ -9,-87,-18,57,87,31,69,68,-64,-60,28,26,-21,-81,17,-76,-7,-45,118,41,61,-84,83,-20,-75,93,-66,16,3,-55,-43,13,36,91,79,-59,101,27,-83,42,101,-127,-72,-8,60,26,-42,-35,56,8,113,-77,11,74,32,-82,-56,-98,72,24,-16,101,53,72,30,98,46,-81,42,81,-69,34,-88,-65,-27,105,-16,-69,42,-75,17,81,92,-27,43,-37,-77,-86,111,24,-126,-66,71,-50,45,82, 
  /* [21][0][][] */ 72,112,66,-99,-20,-20,-62,-33,-37,111,15,-86,-31,-39,-74,-65,-21,8,-58,-88,-55,57,98,-40,78,46,80,6,-38,-59,91,11,-77,36,88,90,-75,-68,-82,29,12,59,-56,23,-56,67,-74,62,96,-127,-7,-35,45,-14,-86,-42,-26,-48,83,74,15,-24,15,56,-23,50,-51,9,0,-67,-36,-8,3,-77,-34,-17,-57,106,91,50,-60,74,8,-32,-72,-52,22,20,-38,38,-35,71,-47,-92,57,-36, 
  /* [22][0][][] */ -30,-46,64,-15,-60,-116,90,43,48,-20,11,3,-44,33,-8,-76,-100,3,-79,102,46,93,33,65,-73,40,-47,42,-22,-56,-53,-70,-67,85,47,41,69,-59,-43,-55,-19,13,-57,5,12,-71,92,-30,-70,-12,-59,68,-43,127,-50,38,80,94,-62,83,-64,-44,11,30,96,-112,-65,-16,60,89,-41,-7,5,74,-38,7,-60,-41,62,25,103,-75,-73,-103,33,118,-10,96,53,94,103,12,-99,65,75,48, 
  /* [23][0][][] */ -22,7,-9,-44,-80,23,41,39,-2,-70,50,-63,-85,76,75,-35,30,58,64,20,47,101,43,-6,52,-45,-45,-52,-93,78,-7,103,68,-48,91,-30,0,96,70,-39,108,24,84,-66,-51,13,-66,86,46,93,-38,-25,-75,104,64,10,17,5,41,-11,-19,67,58,-104,85,-70,26,-19,80,101,-72,96,90,51,24,-51,-114,37,-80,-33,-105,-3,-72,-53,-43,-127,85,-80,-35,-64,-35,-60,8,-33,-47,105, 
  /* [24][0][][] */ -4,77,120,109,59,-31,-85,70,23,-87,-71,61,23,18,-13,-51,-14,28,-53,91,110,-16,-7,35,-18,63,-57,-54,91,98,85,-29,115,-38,-4,-6,19,-17,-70,-98,-10,98,-64,34,-39,71,45,-42,-92,-46,27,-23,-44,70,103,-24,65,-43,-11,-34,87,29,66,-11,-94,-10,-58,108,61,-70,20,26,2,-87,-9,-13,28,-52,-21,106,74,-21,44,-41,-51,-31,-1,-46,-56,91,-17,-26,-61,-52,53,127, 
  /* [25][0][][] */ -39,-24,-3,81,-7,10,-93,75,-34,69,64,63,-99,76,86,-66,-43,-38,-53,2,79,109,-43,79,68,-74,-81,-62,72,77,-110,54,-84,-81,85,113,-127,80,-70,118,-92,79,74,0,27,-51,-115,-88,-100,45,-81,-47,-1,-30,-88,-96,46,-42,105,7,-48,111,-75,27,-100,-87,-64,77,11,2,24,66,-4,95,-16,17,-1,-27,34,-98,-72,-10,-34,80,80,-21,-53,61,-73,124,-59,-20,3,79,108,94, 
  /* [26][0][][] */ 65,-89,4,13,77,-99,109,-60,64,-44,-66,-21,-38,-62,20,-26,85,-4,-60,-68,34,-57,85,73,16,-24,27,34,36,-14,-40,-30,-3,46,40,121,-15,104,-99,73,84,0,-23,-94,-18,54,67,18,-4,77,75,-19,92,83,57,32,110,0,-49,-12,-7,93,-23,-87,43,-28,-106,-7,1,-72,51,43,-108,-44,-75,-32,-1,-2,-13,86,108,45,-42,8,-38,12,19,-127,43,35,81,90,-34,30,31,0, 
  /* [27][0][][] */ 44,28,-96,120,-33,-22,2,-14,-74,65,-30,-12,-115,60,62,-55,60,-127,-18,-94,-19,41,86,-89,-104,55,-39,44,82,-66,52,-107,98,-89,29,97,105,54,-70,-53,23,35,-6,54,59,-84,78,-66,-53,-69,63,87,106,42,-108,-88,88,-29,-21,8,39,-77,-98,-90,25,100,16,-94,40,13,33,-95,4,-68,-8,-68,-78,-19,78,21,-46,-64,79,2,-110,-95,61,-32,96,20,32,96,83,37,65,-93, 
  /* [28][0][][] */ -106,100,-47,68,13,89,-101,20,30,-51,-82,96,60,-73,35,-88,-59,76,55,86,92,84,5,-75,76,-63,77,101,-50,29,-18,39,-25,14,-27,-60,39,98,-27,127,-66,-47,-2,69,111,102,-14,4,95,21,-95,-2,60,-46,29,54,77,47,43,84,52,-10,-10,-103,-71,0,98,-57,-71,61,53,111,-101,68,111,25,43,-24,-9,54,-66,43,64,-5,37,-29,-80,-45,-83,21,52,-71,56,52,6,110, 
  /* [29][0][][] */ 34,-12,9,-9,-38,11,17,-105,-70,-27,-57,-97,74,-9,-74,-16,89,102,-59,108,38,-54,-79,-101,60,-64,-97,-47,-52,101,-66,27,-96,127,114,-9,-24,-91,39,-35,120,-36,-52,40,-79,72,-107,-11,-34,89,17,32,-93,7,86,98,42,-26,-83,6,122,108,-72,30,78,-83,-112,46,72,-16,-41,-58,-24,-104,-23,-101,-63,35,15,4,-36,-45,10,-44,28,-114,-73,102,-21,30,-57,-68,-112,9,-93,-63, 
  /* [30][0][][] */ -66,-83,-47,-22,68,78,64,-41,-56,20,23,41,81,43,-110,-104,95,91,44,4,-20,-94,107,-50,1,51,-29,12,79,-49,15,44,12,-24,14,39,-86,-43,57,-36,-14,-78,-62,-85,69,103,-49,-30,-53,83,-74,-32,-93,-28,94,-83,99,49,-2,-6,-53,-95,45,83,108,84,5,72,80,69,99,-73,25,-127,-86,43,65,-60,-16,-20,64,71,72,32,71,-38,67,19,86,19,54,-94,15,72,-71,-73, 
  /* [31][0][][] */ 52,113,36,-46,-41,4,104,-79,-46,-20,72,-64,-52,-57,97,30,-13,67,-29,41,-22,-25,115,5,41,98,-24,-39,-5,81,65,73,73,47,67,92,35,86,-18,-67,18,101,-87,42,23,95,61,-3,-75,-3,-46,64,31,-47,-9,8,13,45,27,115,-13,-101,109,-75,34,-66,70,-39,-86,13,107,-15,77,-77,-13,53,17,77,56,-48,-9,-10,-103,-80,-24,80,124,-127,-49,63,52,-18,-41,-31,-101,20, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0020086260046809912, 0.0023475850466638803, 0.0020431117154657841, 0.001838196418248117, 0.0019690939225256443, 0.0019867552910000086, 0.0017952424241229892, 0.0020613546948879957, 0.0018218627665191889, 0.001695760409347713, 0.0018960526213049889, 0.0018454147502779961, 0.0020185525063425303, 0.0020905479323118925, 0.0018742521060630679, 0.0020471601746976376, 0.0019736147951334715, 0.0018064957112073898, 0.0025895875878632069, 0.0021229998674243689, 0.0020290373358875513, 0.0022385807242244482, 0.0024712034501135349, 0.0021563766058534384, 0.0021329298615455627, 0.0019628654699772596, 0.0020821911748498678, 0.001975879305973649, 0.0020372096914798021, 0.0017446805723011494, 0.0020787701942026615, 0.0020815180614590645, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { 84, 2473, -87, -389, 233, -529, -175, 739, -334, -621, -187, -444, 205, 547, -525, 86, -421, -286, 1230, 292, -239, -381, 1925, -550, 847, 206, 1264, 88, -338, -124, 810, 756, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.7261790314223617e-05, 5.5237294873222709e-05, 4.8073216021293774e-05, 4.3251682654954493e-05, 4.6331620978889987e-05, 4.6747183660045266e-05, 4.2240997572662309e-05, 4.8502464778721333e-05, 4.286735929781571e-05, 3.9900245610624552e-05, 4.4613003410631791e-05, 4.3421525333542377e-05, 4.7495355829596519e-05, 4.918936247122474e-05, 4.4100052036810666e-05, 4.8168476496357471e-05, 4.6437995479209349e-05, 4.2505780584178865e-05, 6.0931473853997886e-05, 4.995293784304522e-05, 4.7742054448463023e-05, 5.2672487072413787e-05, 5.8145964430877939e-05, 5.0738275604089722e-05, 5.0186587031930685e-05, 4.6185072278603911e-05, 4.899273335468024e-05, 4.6491277316818014e-05, 4.7934347094269469e-05, 4.1051309381145984e-05, 4.8912239435594529e-05, 4.897689723293297e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[3*1*1*32] = { 
  /* [0][0][][] */ -84,127,-78,-5,72,-62,-75,-50,81,-28,-34,-82,14,14,-32,-47,-48,-22,-17,50,27,-105,100,-68,50,-31,99,17,-24,10,6,120, 
  /* [1][0][][] */ 105,-78,-73,3,6,46,-127,-95,-54,111,83,17,105,81,-2,-91,97,9,-120,-84,109,0,-59,49,-81,83,-19,-27,71,2,-92,-44, 
  /* [2][0][][] */ -14,-127,89,83,0,57,-80,42,-22,28,-80,83,-7,-68,79,47,71,-63,-60,71,6,23,12,46,-97,-47,-10,-8,18,66,-43,43, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant42_scale = { 3, { 0.0051508629694581032, 0.0036663843784481287, 0.0043560517951846123, } };
const TfArray<3, int> quant42_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[3] = { 29181, -44825, -36153, };
const TfArray<1, int> tensor_dimension43 = { 1, { 3 } };
const TfArray<3, float> quant43_scale = { 3, { 0.00021199499315116554, 0.00015089803491719067, 0.00017928279703482985, } };
const TfArray<3, int> quant43_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,80,80,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,80,80,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,80,80,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.11785932630300522, } };
const TfArray<1, int> quant46_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,80,80,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,81,81,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,40,40,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,40,40,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.074397608637809753, } };
const TfArray<1, int> quant50_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,40,40,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,40,40,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,40,40,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.080935455858707428, } };
const TfArray<1, int> quant53_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,40,40,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.096816256642341614, } };
const TfArray<1, int> quant54_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,40,40,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,41,41,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,20,20,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.065793558955192566, } };
const TfArray<1, int> quant58_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.064025357365608215, } };
const TfArray<1, int> quant61_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.07630186527967453, } };
const TfArray<1, int> quant62_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.067647993564605713, } };
const TfArray<1, int> quant65_zero = { 1, { 19 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.11115552484989166, } };
const TfArray<1, int> quant66_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,20,20,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.041157178580760956, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,20,20,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.10446182638406754, } };
const TfArray<1, int> quant69_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,20,20,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 102400, (TfLiteIntArray*)&tensor_dimension44, 102400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 102400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 102400, (TfLiteIntArray*)&tensor_dimension46, 51200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 314928, (TfLiteIntArray*)&tensor_dimension47, 307200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 314928, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 314928, (TfLiteIntArray*)&tensor_dimension49, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 153600, (TfLiteIntArray*)&tensor_dimension50, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 76800, (TfLiteIntArray*)&tensor_dimension51, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 76800, (TfLiteIntArray*)&tensor_dimension53, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 80688, (TfLiteIntArray*)&tensor_dimension55, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 80688, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 80688, (TfLiteIntArray*)&tensor_dimension57, 19200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 99888, (TfLiteIntArray*)&tensor_dimension58, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 38400, (TfLiteIntArray*)&tensor_dimension59, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 38400, (TfLiteIntArray*)&tensor_dimension61, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 76800, (TfLiteIntArray*)&tensor_dimension62, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 38400, (TfLiteIntArray*)&tensor_dimension63, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 44800, (TfLiteIntArray*)&tensor_dimension65, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 38400, (TfLiteIntArray*)&tensor_dimension66, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 38400, (TfLiteIntArray*)&tensor_dimension68, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1200, (TfLiteIntArray*)&tensor_dimension69, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 71;
  for(size_t i = 0; i < 71; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 27; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
